{
  "console.log with Commmentary -JS": {
    "description": "console.log with Commmentary -JS",
        "prefix":"logC",
        "body":[
        "console.log(`$1:`,$1)$0"
    ]
    },
    "console.log with Template Expression -JS": {
    "description": "console.log with Template Expression -JS",
        "prefix":"logEx",
        "body":[
        "console.log(`$1: ${${1:expression}}`)$0"
    ]
    },
    "console.dir -JS": {
    "description": "console.dir -JS",
        "prefix":"dir",
        "body":[
        "console.dir($1)$0"
    ]
    },
    "let instead var? -JS": {
    "description": "let instead var? -JS",
        "prefix":"var",
        "body":[
        "let $0"
    ]
    },
    "/*MultiLine comment*/ -JS": {
    "description": "/*MultiLine comment*/ -JS",
        "prefix":"//",
        "body":[
        "/*",
        "  $1",
        "*/",
        "$0"
    ]
    },
    "use strict: Strict Mode -JS": {
    "description": "use strict: Strict Mode -JS",
        "prefix":"strict",
        "body":[
        "'use strict'$0"
    ]
    },
    "return -JS": {
    "description": "return -JS",
        "prefix":"return",
        "body":[
        "return $0"
    ]
    },
    "import -JS": {
    "description": "import -JS",
        "prefix":"import",
        "body":[
        "import {${1:member1,member2}} from './${2:module}'$0"
    ]
    },
    "import default -JS": {
    "description": "import default -JS",
        "prefix":"importDefault",
        "body":[
        "import ${1:defaultName},${2:member1,member2}} from './${3:module}'$0"
    ]
    },
    "import * all as name from './module' -JS": {
    "description": "import * all as name from './module' -JS",
        "prefix":"importAll",
        "body":[
        "import * as ${1:name} from './${2:module}'$0"
    ]
    },
    "import member1 as name1 from './module' -JS": {
    "description": "import member1 as name1 from './module' -JS",
        "prefix":"importAs",
        "body":[
        "import ${1:member1} as ${2:name1} from './${3:module}'$0"
    ]
    },
    "export {name1,name2} exports a function declared earlier -JS": {
    "description": "export {name1,name2} exports a function declared earlier -JS",
        "prefix":"export",
        "body":[
        "export {${1:name1,name2}}$0"
    ]
    },
    "export expression -JS": {
    "description": "export expression -JS",
        "prefix":"exportExpression",
        "body":[
        "export ${1:expression}$0"
    ]
    },
    "export default expression -JS": {
    "description": "export default expression -JS",
        "prefix":"exportDefaultExpression",
        "body":[
        "export default ${1:expression}$0"
    ]
    },
    "export {name1 as default} -JS": {
    "description": "export {name1 as default} -JS",
        "prefix":"exportAsDefault",
        "body":[
        "export {${1:name1} as default}$0"
    ]
    },
    "export {name1 as default,variable1 as name2} -JS": {
    "description": "export {name1 as default,variable1 as name2} -JS",
        "prefix":"exportAsDefaultMore",
        "body":[
        "export {${1:name1} as default,${2:variable1 as name2}}$0"
    ]
    },
    "export let name1 -JS": {
    "description": "export let name1 -JS",
        "prefix":"exportLet",
        "body":[
        "export let ${1:name1}$0"
    ]
    },
    "export let name1,name2 -JS": {
    "description": "export let name1,name2 -JS",
        "prefix":"exportLetMore",
        "body":[
        "export let ${1:name1,name2}$0"
    ]
    },
    "export const name1 -JS": {
    "description": "export const name1 -JS",
        "prefix":"exportConst",
        "body":[
        "export const ${1:name1}$0"
    ]
    },
    "export const name1,name2 -JS": {
    "description": "export const name1,name2 -JS",
        "prefix":"exportConstMore",
        "body":[
        "export const ${1:name1,name2}$0"
    ]
    },
    "export * from './module' -JS": {
    "description": "export * from './module' -JS",
        "prefix":"exportAllFrom",
        "body":[
        "export * from './${1:module}'$0"
    ]
    },
    "export {name1,name2} from './module' -JS": {
    "description": "export {name1,name2} from './module' -JS",
        "prefix":"exportFrom",
        "body":[
        "export {${1:name1,name2}} from './${2:module}'$0"
    ]
    },
    "export {name1 as default} from './module' -JS": {
    "description": "export {name1 as default} from './module' -JS",
        "prefix":"exportAsDefaultFrom",
        "body":[
        "export {${1:name1} as default} from './${2:module}'$0"
    ]
    },
    "export {name1 as default,variable1 as name2} from './module' -JS": {
    "description": "export {name1 as default,variable1 as name2} from './module' -JS",
        "prefix":"exportAsDefaultFromMore",
        "body":[
        "export {${1:name1} as default,${2:variable1 as name2}} from './${3:module}'$0"
    ]
    },
    "destructuring Object -JS": {
    "description": "destructuring Object -JS",
        "prefix":"destructObj",
        "body":[
        "let {${2:${3:property}: ${4:newEl}}} = ${1:obj}$0"
    ]
    },
    "destructuring Array -JS": {
    "description": "destructuring Array -JS",
        "prefix":"destructArr",
        "body":[
        "let [${2:${3:firstEl},${4:secondEl}}] = ${1:arr}$0"
    ]
    },
    "destructuring to Separate values -JS": {
    "description": "destructuring to Separate values -JS",
        "prefix":"destructVal",
        "body":[
        "[${1:e},${2:el}]$0"
    ]
    },
    "while -JS": {
    "description": "while -JS",
        "prefix":"while",
        "body":[
        "while(${1:conditional}){",
        "  $2",
        "  z++",
        "}$0"
    ]
    },
    "Ternary: condition ? ifTrue : ifFalse -JS": {
    "description": "Ternary: condition ? ifTrue : ifFalse -JS",
        "prefix":"ternary",
        "body":[
        "${1:condition} ? ${2:ifTrue} : ${3:ifFalse}$0"
    ]
    },
    "Ternary Multiline: condition ? (expr1,expr2) : (expr3,expr4) -JS": {
    "description": "Ternary Multiline: condition ? (expr1,expr2) : (expr3,expr4) -JS",
        "prefix":"ternaryMultiLine",
        "body":[
        "${1:condition} ? (",
        "    ${2:expr1},",
        "    ${3:expr2}",
        ") : (",
        "    ${4:expr3},",
        "    ${5:expr4}",
        ")$0"
    ]
    },
    "if (error) throw error -JS": {
    "description": "if (error) throw error -JS",
        "prefix":"ifThrowErr",
        "body":[
        "if (error) throw error$0"
    ]
    },
    "Switch Case Break Default -JS": {
    "description": "Switch Case Break Default -JS",
        "prefix":"switc",
        "body":[
        "switch($1){",
        "  case $2:",
        "    $3",
        "    break",
        "  default:",
        "    $4",
        "}$0"
    ]
    },
    "for -JS": {
    "description": "for -JS",
        "prefix":"fo",
        "body":[
        "for (let i = 0; i < $1.length; i++){",
        "  ${2:$1[i]}",
        "}$0"
    ]
    },
    "for...of -JS": {
    "description": "for...of -JS",
        "prefix":"foof",
        "body":[
        "for (let e of ${1:iterable}){",
        "  $2",
        "}$0"
    ]
    },
    "for...in -JS": {
    "description": "for...in -JS",
        "prefix":"foin",
        "body":[
        "for (let e in ${1:object}){",
        "  $2",
        "}$0,"
    ]
    },
    "setAttribute(attribute,value): add or change value -JS": {
    "description": "setAttribute(attribute,value): add or change value -JS",
        "prefix":"setAttr",
        "body":[
        "setAttribute(${1:attribute},${2:value})$0"
    ]
    },
    "getAttribute(attribute): add or change value -JS": {
    "description": "getAttribute(attribute): add or change value -JS",
        "prefix":"getAttr",
        "body":[
        "getAttribute(${1:attribute})$0"
    ]
    },
    "hasAttribute(attribute) Boolean -JS": {
    "description": "hasAttribute(attribute) Boolean -JS",
        "prefix":"hasAttr",
        "body":[
        "hasAttribute(${1:attribute})$0"
    ]
    },
    "hasAttributes() Boolean -JS": {
    "description": "hasAttributes() Boolean -JS",
        "prefix":"hasAttrs",
        "body":[
        "hasAttributes()$0"
    ]
    },
    "location.reload(true): true: Reload from Server -JS": {
    "description": "location.reload(true): true: Reload from Server -JS",
        "prefix":"reload",
        "body":[
        "location.reload(${1:true})$0"
    ]
    },
    "createElement -JS": {
    "description": "createElement -JS",
        "prefix":"createElement",
        "body":[
        "document.createElement('$1')$0"
    ]
    },
    "replace -JS": {
    "description": "replace -JS",
        "prefix":"replace",
        "body":[
        "replace($1,$2)$0"
    ]
    },
    "typeof(String,Number,Object) -JS": {
    "description": "typeof(String,Number,Object) -JS",
        "prefix":"typeof",
        "body":[
        "typeof($1)$0"
    ]
    },
    "value As Number -JS": {
    "description": "value As Number -JS",
        "prefix":"valueAsNum",
        "body":[
        "valueAsNumber($1)$0"
    ]
    },
    "innerHTML -JS": {
    "description": "innerHTML -JS",
        "prefix":"innerHTML",
        "body":[
        "innerHTML = $0"
    ]
    },
    "getElementById() -JS": {
    "description": "getElementById() -JS",
        "prefix":"getElementById",
        "body":[
        "document.getElementById($1)$0"
    ]
    },
    "getElementsByClassName() -JS": {
    "description": "getElementsByClassName() -JS",
        "prefix":"getElementsByClassName",
        "body":[
        "document.getElementsByClassName($1)$0"
    ]
    },
    "getElementsByName() -JS": {
    "description": "getElementsByName() -JS",
        "prefix":"getElementsByName",
        "body":[
        "document.getElementsByName($1)$0"
    ]
    },
    "getElementsByTagName() -JS": {
    "description": "getElementsByTagName() -JS",
        "prefix":"getElementsByTagName",
        "body":[
        "document.getElementsByTagName($1)$0"
    ]
    },
    "querySelector -JS": {
    "description": "querySelector -JS",
        "prefix":"querySelec",
        "body":[
        "document.querySelector('${1:el}')$0"
    ]
    },
    "querySelectorAll -JS": {
    "description": "querySelectorAll -JS",
        "prefix":"querySelecAll",
        "body":[
        "document.querySelectorAll('${1:el}')$0"
    ]
    },
    "textContent -JS": {
    "description": "textContent -JS",
        "prefix":"textCont",
        "body":[
        "textContent$0"
    ]
    },
    "window.sessionStorage -JS": {
    "description": "window.sessionStorage -JS",
        "prefix":"sessionStorage",
        "body":[
        "sessionStorage$0"
    ]
    },
    "window.localStorage-JS": {
    "description": "window.localStorage-JS",
        "prefix":"localStorage",
        "body":[
        "localStorage$0"
    ]
    },
    "setItem -JS": {
    "description": "setItem -JS",
        "prefix":"setItem",
        "body":[
        "setItem($1)$0"
    ]
    },
    "getItem -JS": {
    "description": "getItem -JS",
        "prefix":"getItem",
        "body":[
        "getItem($1)$0"
    ]
    },
    "removeItem -JS": {
    "description": "removeItem -JS",
        "prefix":"removeItem",
        "body":[
        "removeItem($1)$0"
    ]
    },
    "checked -JS": {
    "description": "checked -JS",
        "prefix":"checked",
        "body":[
        "checked$0"
    ]
    },
    "parseInt -JS": {
    "description": "parseInt -JS",
        "prefix":"parseInt",
        "body":[
        "parseInt(${1:string},${2:radix})$0"
    ]
    },
    "parseFloat -JS": {
    "description": "parseFloat -JS",
        "prefix":"parseFloat",
        "body":[
        "parseFloat(${1:string})$0"
    ]
    },
    "toString(radix) -JS": {
    "description": "toString(radix) -JS",
        "prefix":"toStringRadix",
        "body":[
        "toString(${1:radix})$0"
    ]
    },
    "Math.E: Base of Natural Logarithms -JS": {
    "description": "Math.E: Base of Natural Logarithms -JS",
        "prefix":"MathE",
        "body":[
        "Math.E$0"
    ]
    },
    "Math.LN2: Natural Logarithm of 2 -JS": {
    "description": "Math.LN2: Natural Logarithm of 2 -JS",
        "prefix":"MathLN2",
        "body":[
        "Math.LN2$0"
    ]
    },
    "Math.LN10: Natural Logarithm of 10 -JS": {
    "description": "Math.LN10: Natural Logarithm of 10 -JS",
        "prefix":"MathLN10",
        "body":[
        "Math.LN10$0"
    ]
    },
    "Math.LOG2E: Base 2 Logarithm of E -JS": {
    "description": "Math.LOG2E: Base 2 Logarithm of E -JS",
        "prefix":"MathLOG2E",
        "body":[
        "Math.LOG2E$0"
    ]
    },
    "Math.LOG10E: Base 10 Logarithm of E -JS": {
    "description": "Math.LOG10E: Base 10 Logarithm of E -JS",
        "prefix":"MathLOG10E",
        "body":[
        "Math.LOG10E$0"
    ]
    },
    "Math.PI: Ratio of the Circumference of a Circle to its Diameter -JS": {
    "description": "Math.PI: Ratio of the Circumference of a Circle to its Diameter -JS",
        "prefix":"MathPI",
        "body":[
        "Math.PI$0"
    ]
    },
    "Math.SQRT1_2: Square Root of 1/2 -JS": {
    "description": "Math.SQRT1_2: Square Root of 1/2 -JS",
        "prefix":"MathSQRT1_2",
        "body":[
        "Math.SQRT1_2$0"
    ]
    },
    "Math.SQRT2: Square Root of 2 -JS": {
    "description": "Math.SQRT2: Square Root of 2 -JS",
        "prefix":"MathSQRT2",
        "body":[
        "Math.SQRT2$0"
    ]
    },
    "Math.abs(x): Aabsolute Value -JS": {
    "description": "Math.abs(x): Aabsolute Value -JS",
        "prefix":"MathAbs",
        "body":[
        "Math.abs($1)$0"
    ]
    },
    "Math.acos(x): Arccosine (in Radians) -JS": {
    "description": "Math.acos(x): Arccosine (in Radians) -JS",
        "prefix":"MathAcos",
        "body":[
        "Math.acos($1)$0"
    ]
    },
    "Math.acosh(x): Hyperbolic Arc-cosine -JS": {
    "description": "Math.acosh(x): Hyperbolic Arc-cosine -JS",
        "prefix":"MathAcosh",
        "body":[
        "Math.acosh($1)$0"
    ]
    },
    "Math.asin(x): Arcsine (in Radians) -JS": {
    "description": "Math.asin(x): Arcsine (in Radians) -JS",
        "prefix":"MathAsin",
        "body":[
        "Math.asin($1)$0"
    ]
    },
    "Math.asinh(x): Hyperbolic Arcsine -JS": {
    "description": "Math.asinh(x): Hyperbolic Arcsine -JS",
        "prefix":"MathAsinh",
        "body":[
        "Math.asinh($1)$0"
    ]
    },
    "Math.atan(x): Arctangent (in Radians) -JS": {
    "description": "Math.atan(x): Arctangent (in Radians) -JS",
        "prefix":"MathAtan",
        "body":[
        "Math.atan($1)$0"
    ]
    },
    "Math.atanh(x): Hyperbolic Arctangent -JS": {
    "description": "Math.atanh(x): Hyperbolic Arctangent -JS",
        "prefix":"MathAtanh",
        "body":[
        "Math.atanh($1)$0"
    ]
    },
    "Math.atan2(x,y): Arctangent of the Quotient of its Arguments -JS": {
    "description": "Math.atan2(x,y): Arctangent of the Quotient of its Arguments -JS",
        "prefix":"MathAtan2",
        "body":[
        "Math.atan2(${1:x},${2:y})$0"
    ]
    },
    "Math.cbrt(x): Cube Root -JS": {
    "description": "Math.cbrt(x): Cube Root -JS",
        "prefix":"MathCbrt",
        "body":[
        "Math.cbrt($1)$0"
    ]
    },
    "Math.ceil(x): Smallest Integer Greater Than or Equal -JS": {
    "description": "Math.ceil(x): Smallest Integer Greater Than or Equal -JS",
        "prefix":"MathCeil",
        "body":[
        "Math.ceil($1)$0"
    ]
    },
    "Math.clz32(x): Number of Leading Zero Bits in the 32-bit Binary -JS": {
    "description": "Math.clz32(x): Number of Leading Zero Bits in the 32-bit Binary -JS",
        "prefix":"MathClz32",
        "body":[
        "Math.clz32($1)$0"
    ]
    },
    "Math.cos(x): Cosine -JS": {
    "description": "Math.cos(x): Cosine -JS",
        "prefix":"MathCos",
        "body":[
        "Math.cos($1)$0"
    ]
    },
    "Math.cosh(x): Hyperbolic Cosine -JS": {
    "description": "Math.cosh(x): Hyperbolic Cosine -JS",
        "prefix":"MathCosh",
        "body":[
        "Math.cosh($1)$0"
    ]
    },
    "Math.exp(x): e˟ x(argument) e(Euler's Number) -JS": {
    "description": "Math.exp(x): e˟ x(argument) e(Euler's Number) -JS",
        "prefix":"MathExp",
        "body":[
        "Math.exp($1)$0"
    ]
    },
    "Math.expm1(x): e˟-1,x(argument),e(Base of the Natural Logarithms) -JS": {
    "description": "Math.expm1(x): e˟-1,x(argument),e(Base of the Natural Logarithms) -JS",
        "prefix":"MathExpm1",
        "body":[
        "Math.expm1($1)$0"
    ]
    },
    "Math.floor(x): Largest Integer Less than or Equal -JS": {
    "description": "Math.floor(x): Largest Integer Less than or Equal -JS",
        "prefix":"MathFloor",
        "body":[
        "Math.floor($1)$0"
    ]
    },
    "Math.fround(x): Nearest Single Precision Float Representation -JS": {
    "description": "Math.fround(x): Nearest Single Precision Float Representation -JS",
        "prefix":"MathFround",
        "body":[
        "Math.fround($1)$0"
    ]
    },
    "Math.hypot(x,y,...): Square Root of the Sum of Squares of its Arguments -JS": {
    "description": "Math.hypot(x,y,...): Square Root of the Sum of Squares of its Arguments -JS",
        "prefix":"MathHypot",
        "body":[
        "Math.hypot(${1:x},${2:y})$0"
    ]
    },
    "Math.imul(x,y): C-like 32-bit Multiplication -JS": {
    "description": "Math.imul(x,y): C-like 32-bit Multiplication -JS",
        "prefix":"MathImul",
        "body":[
        "Math.imul(${1:x},${2:y})$0"
    ]
    },
    "Math.log(x): Natural Logarithm (base e) -JS": {
    "description": "Math.log(x): Natural Logarithm (base e) -JS",
        "prefix":"MathLog",
        "body":[
        "Math.log($1)$0"
    ]
    },
    "Math.log1p(x): Natural Logarithm (base e) of 1 + x -JS": {
    "description": "Math.log1p(x): Natural Logarithm (base e) of 1 + x -JS",
        "prefix":"MathLog1p",
        "body":[
        "Math.log1p($1)$0"
    ]
    },
    "Math.log10(x): Base 10 Logarithm -JS": {
    "description": "Math.log10(x): Base 10 Logarithm -JS",
        "prefix":"MathLog10",
        "body":[
        "Math.log10($1)$0"
    ]
    },
    "Math.log2(x): Base 2 Logarithm -JS": {
    "description": "Math.log2(x): Base 2 Logarithm -JS",
        "prefix":"MathLog2",
        "body":[
        "Math.log2($1)$0"
    ]
    },
    "Math.max(x,y,...): Largest of Zero or More Numbers -JS": {
    "description": "Math.max(x,y,...): Largest of Zero or More Numbers -JS",
        "prefix":"MathMax",
        "body":[
        "Math.max(${1:x},${2:y})$0"
    ]
    },
    "Math.min(x,y,...): Smallest of Zero or More Numbers -JS": {
    "description": "Math.min(x,y,...): Smallest of Zero or More Numbers -JS",
        "prefix":"MathMin",
        "body":[
        "Math.min(${1:x},${2:y})$0"
    ]
    },
    "Math.pow(base,expoent): Base to the Exponent Power -JS": {
    "description": "Math.pow(base,expoent): Base to the Exponent Power -JS",
        "prefix":"MathPow",
        "body":[
        "Math.pow(${1:base},${2:expoent})$0"
    ]
    },
    "Math.random(): Floating-point,Pseudo-Random Number in the Range [0,1) -JS": {
    "description": "Math.random(): Floating-point,Pseudo-Random Number in the Range [0,1) -JS",
        "prefix":"MathRandom",
        "body":[
        "Math.random()$0"
    ]
    },
    "Math.floor(Math.random() * 100): Integer Random Number -JS": {
    "description": "Math.floor(Math.random() * 100): Integer Random Number -JS",
        "prefix":"MathRandomCompleteFunc",
        "body":[
        "const random = (min,max) => Math.floor(Math.random() * (max - min + 1)) + min$0"
    ]
    },
    "Math.floor(Math.random() * 100): Int Random Number -JS": {
    "description": "Math.floor(Math.random() * 100): Int Random Number -JS",
        "prefix":"randomCompleteFunc",
        "body":[
        "const random = (min,max) => Math.floor(Math.random() * (max - min + 1)) + min$0"
    ]
    },
    "Math.round(x): Rounded to the Nearest Integer -JS": {
    "description": "Math.round(x): Rounded to the Nearest Integer -JS",
        "prefix":"MathRound",
        "body":[
        "Math.round($1)$0"
    ]
    },
    "Math.sign(x): Sign (Positive,Negative or Zero) -JS": {
    "description": "Math.sign(x): Sign (Positive,Negative or Zero) -JS",
        "prefix":"MathSign",
        "body":[
        "Math.sign($1)$0"
    ]
    },
    "Math.sin(x): Sine -JS": {
    "description": "Math.sin(x): Sine -JS",
        "prefix":"MathSin",
        "body":[
        "Math.sin($1)$0"
    ]
    },
    "Math.sinh(x): Hyperbolic Sine -JS": {
    "description": "Math.sinh(x): Hyperbolic Sine -JS",
        "prefix":"MathSinh",
        "body":[
        "Math.sinh($1)$0"
    ]
    },
    "Math.sqrt(x): Square Root -JS": {
    "description": "Math.sqrt(x): Square Root -JS",
        "prefix":"MathSqrt",
        "body":[
        "Math.sqrt($1)$0"
    ]
    },
    "Math.tan(x): Tangent -JS": {
    "description": "Math.tan(x): Tangent -JS",
        "prefix":"MathTan",
        "body":[
        "Math.tan($1)$0"
    ]
    },
    "Math.tanh(x): Hyperbolic Tangent -JS": {
    "description": "Math.tanh(x): Hyperbolic Tangent -JS",
        "prefix":"MathTanh",
        "body":[
        "Math.tanh($1)$0"
    ]
    },
    "Math.toSource(): Returns the string 'Math' -JS": {
    "description": "Math.toSource(): Returns the string 'Math' -JS",
    "prefix":"MathToSource",
        "body":[
        "Math.toSource($1)$0"
    ]
    },
    "Math.trunc(x): Integer Part by Removing any Fractional Digits -JS": {
    "description": "Math.trunc(x): Integer Part by Removing any Fractional Digits -JS",
        "prefix":"MathTrunc",
        "body":[
        "Math.trunc($1)$0"
    ]
    },
    "=> Arrow function -JS": {
    "description": "=> Arrow function -JS",
        "prefix":"funcArrow",
        "body":[
        "e =>{",
        "  $1",
        "}$0"
    ]
    },
    "=> Arrow function Advanced -JS": {
    "description": "=> Arrow function Advanced -JS",
        "prefix":"funcArrowAd",
        "body":[
        "() => $0"
    ]
    },
    "(Anonymous) Function -JS": {
    "description": "(Anonymous) Function -JS",
        "prefix":"funcAnon",
        "body":[
        "(function(){",
        "  $1",
        "})()$0"
    ]
    },
    "Anonymous Function Associated -JS": {
    "description": "Anonymous Function Associated -JS",
        "prefix":"funcAnonAsso",
        "body":[
        "function(){",
        "  $2",
        "}()$0"
    ]
    },
    "function name() -JS": {
    "description": "function name() -JS",
        "prefix":"func",
        "body":[
        "function ${1:name}(){",
        "  $2",
        "}",
        "$0"
    ]
    },
    "call(): Calls a Function with a Given This Value and Arguments Provided Individually -JS": {
    "description": "call(): Calls a Function with a Given This Value and Arguments Provided Individually -JS",
        "prefix":"call",
        "body":[
        "call(${1:thisArg})$0"
    ]
    },
    "document.write -JS": {
    "description": "document.write -JS",
        "prefix":"write",
        "body":[
        "document.write(${1:markup})$0"
    ]
    },
    "document.writeln: Write and adds a newline -JS": {
    "description": "document.writeln: Write and adds a newline -JS",
        "prefix":"writeln",
        "body":[
        "document.writeln(${1:line})$0"
    ]
    },
    "do...while -JS": {
    "description": "do...while -JS",
        "prefix":"dowhile",
        "body":[
        "do{",
        "  $1",
        "z++",
        "} while(${2:conditional})$0"
    ]
    },
    "split() -JS": {
    "description": "split() -JS",
        "prefix":"split",
        "body":[
        "split($1)$0"
    ]
    },
    "[array] -JS": {
    "description": "[array] -JS",
        "prefix":"array",
        "body":[
        "[$1]$0"
    ]
    },
    "Array[element] -JS": {
    "description": "Array[element] -JS",
        "prefix":"arrayEl",
        "body":[
        "${1:ArrayName}[${2:0}] = '${4:value}'$0"
    ]
    },
    "push() add new last Array element -JS": {
    "description": "push() add new last Array element -JS",
        "prefix":"push",
        "body":[
        "push($1)$0"
    ]
    },
    "unshift() add new first Array element -JS": {
    "description": "unshift() add new first Array element -JS",
        "prefix":"unshift",
        "body":[
        "unshift($1)$0"
    ]
    },
    "pop() remove last Array element -JS": {
    "description": "pop() remove last Array element -JS",
        "prefix":"pop",
        "body":[
        "pop()$0"
    ]
    },
    "shift() remove first Array element -JS": {
    "description": "shift() remove first Array element -JS",
        "prefix":"shift",
        "body":[
        "shift()$0"
    ]
    },
    "reverse() Array -JS": {
    "description": "reverse() Array -JS",
        "prefix":"reverse",
        "body":[
        "reverse()$0"
    ]
    },
    "sort() Array -JS": {
    "description": "sort() Array -JS",
        "prefix":"sort",
        "body":[
        "sort()$0"
    ]
    },
    "join() Array -JS": {
    "description": "join() Array -JS",
        "prefix":"join",
        "body":[
        "join(${1:' '})$0"
    ]
    },
    "splice() Array -JS": {
    "description": "splice() Array -JS",
        "prefix":"splice",
        "body":[
        "splice(${1:start},${2:0 or deleteCount},${3:new})$0"
    ]
    },
    "fill() Array elements -JS": {
    "description": "fill() Array elements -JS",
        "prefix":"fill",
        "body":[
        "fill($1,${2:start},${3:end})$0"
    ]
    },
    "copyWithin() Array -JS": {
    "description": "copyWithin() Array -JS",
        "prefix":"copyWithin",
        "body":[
        "copyWithin(${3:target},${1:start},${2:end})$0"
    ]
    },
    "concat() Array -JS": {
    "description": "concat() Array -JS",
        "prefix":"concat",
        "body":[
        "concat(${1:ArrayName})$0"
    ]
    },
    "entries() new Array Iterator -JS": {
    "description": "entries() new Array Iterator -JS",
        "prefix":"entries",
        "body":[
        "entries()$0"
    ]
    },
    "every() Return if Every element pass on Test -JS": {
    "description": "every() Return if Every element pass on Test -JS",
        "prefix":"every",
        "body":[
        "every($1)$0"
    ]
    },
    "filter() new Array all Filtred Array elements -JS": {
    "description": "filter() new Array all Filtred Array elements -JS",
        "prefix":"filter",
        "body":[
        "filter($1)$0"
    ]
    },
    "find() first Array element that pass on Test -JS": {
    "description": "find() first Array element that pass on Test -JS",
        "prefix":"find",
        "body":[
        "find($1)$0"
    ]
    },
    "findIndex() first Array Index that pass on Test -JS": {
    "description": "findIndex() first Array Index that pass on Test -JS",
        "prefix":"findIndex",
        "body":[
        "findIndex($1)$0"
    ]
    },
    "forEach() Array element -JS": {
    "description": "forEach() Array element -JS",
        "prefix":"forEach",
        "body":[
        "forEach(${1:function})$0"
    ]
    },
    "forEach() Element,Index,Array -JS": {
    "description": "forEach() Element,Index,Array -JS",
        "prefix":"forEachComplete",
        "body":[
        "forEach((e,i,a) =>{",
        "  $1",
        "})$0"
    ]
    },
    "includes() Array has it -JS": {
    "description": "includes() Array has it -JS",
        "prefix":"includes",
        "body":[
        "includes(${1:el})$0"
    ]
    },
    "Array.from() array-like or iterable object -JS": {
    "description": "Array.from() array-like or iterable object -JS",
        "prefix":"arrFrom",
        "body":[
        "Array.from(${1:el})$0"
    ]
    },
    "... Spread Syntax -JS": {
    "description": "... Spread Syntax -JS",
        "prefix":"spread",
        "body":[
        "...$0"
    ]
    },
    "... Rest Parameters -JS": {
    "description": "... Rest Parameters -JS",
        "prefix":"rest",
        "body":[
        "...$0"
    ]
    },
    "keys() Array Key each Index -JS": {
    "description": "keys() Array Key each Index -JS",
        "prefix":"keys",
        "body":[
        "keys()$0"
    ]
    },
    "values() new Iterator object contains the values,Boolean -JS": {
    "description": "values() new Iterator object contains the values,Boolean -JS",
        "prefix":"values",
        "body":[
        "values()$0"
    ]
    },
    "map() key/value map -JS": {
    "description": "map() key/value map -JS",
        "prefix":"map",
        "body":[
        "map($1)$0"
    ]
    },
    "Set() store unique values -JS": {
    "description": "Set() store unique values -JS",
        "prefix":"set",
        "body":[
        "Set($1)$0"
    ]
    },
    "add() to the end -JS": {
    "description": "add() to the end -JS",
        "prefix":"add",
        "body":[
        "add($1)$0"
    ]
    },
    "delete() remove specified element -JS": {
    "description": "delete() remove specified element -JS",
        "prefix":"delete",
        "body":[
        "delete($1)$0"
    ]
    },
    "has() boolean element exists -JS": {
    "description": "has() boolean element exists -JS",
        "prefix":"has",
        "body":[
        "has($1)$0"
    ]
    },
    "clear() -JS": {
    "description": "clear() -JS",
        "prefix":"clear",
        "body":[
        "clear()$0"
    ]
    },
    "next() Object with done and value,next iterator -JS": {
    "description": "next() Object with done and value,next iterator -JS",
        "prefix":"next",
        "body":[
        "next()$0"
    ]
    },
    "Generator: function with iteraction -JS": {
    "description": "Generator: function with iteraction -JS",
        "prefix":"generator",
        "body":[
        "function* gen(){",
        "  yield $1",
        "}",
        "$0"
    ]
    },
    "yield -JS": {
    "description": "yield -JS",
        "prefix":"yield",
        "body":[
        "yield $0"
    ]
    },
    "reduce() Array Accumulator: Previous and Current value -JS": {
    "description": "reduce() Array Accumulator: Previous and Current value -JS",
        "prefix":"reduce",
        "body":[
        "reduce((${1:prev,curr}) =>{",
        "  $2",
        "}${3:,initialValue})"
    ]
    },
    "reduceRight() Array right-to-left Accumulator: Previous and Current value -JS": {
    "description": "reduceRight() Array right-to-left Accumulator: Previous and Current value -JS",
        "prefix":"reduceR",
        "body":[
        "reduceRight((prev,curr) => $1)$0"
    ]
    },
    "slice() Array to new Array -JS": {
    "description": "slice() Array to new Array -JS",
        "prefix":"slice",
        "body":[
        "slice(${1:start},${2:end})$0"
    ]
    },
    "some() Return if Some element pass on Test -JS": {
    "description": "some() Return if Some element pass on Test -JS",
        "prefix":"some",
        "body":[
        "some($1)$0"
    ]
    },
    "toString() -JS": {
    "description": "toString() -JS",
        "prefix":"toString",
        "body":[
        "toString()$0"
    ]
    },
    "toString().trim() -JS": {
    "description": "toString().trim() -JS",
        "prefix":"toStringTrim",
        "body":[
        "toString().trim()$0"
    ]
    },
    "toString(base) To String Radix base,-JS": {
    "description": "toString(base) To String Radix base,-JS",
        "prefix":"toStringRadixBase",
        "body":[
        "toString(${1:RadixBase})$0"
    ]
    },
    "Array.toSource() Array's Code as String,-JS": {
    "description": "Array.toSource() Array's Code as String,-JS",
        "prefix":"ArrayToSource",
        "body":[
        "Array.toSource()$0"
    ]
    },
    "Object.assign(target,...sources) Copies the values of all enumerable own properties from one or more source objects to a target object -JS": {
    "description": "Object.assign(target,...sources) Copies the values of all enumerable own properties from one or more source objects to a target object -JS",
        "prefix":"objAssign",
        "body":[
        "Object.assign({},${1:source(s)})$0"
    ]
    },
    "Object.create(proto[,propertiesObject]) creates a new object with the specified prototype object and properties -JS": {
    "description": "Object.create(proto[,propertiesObject]) creates a new object with the specified prototype object and properties -JS",
        "prefix":"objCreate",
        "body":[
        "Object.create(${1:obj}.prototype)$0"
    ]
    },
    "Object.defineProperty(obj,prop,descriptor) Adds the named property described by a given descriptor to an object -JS": {
    "description": "Object.defineProperty(obj,prop,descriptor) Adds the named property described by a given descriptor to an object -JS",
        "prefix":"objDefineProperty",
        "body":[
        "Object.defineProperty(${1:obj},${2:prop},${3:descriptor})$0"
    ]
    },
    "Object.defineProperties(obj,props) Adds the named properties described by the given descriptors to an object -JS": {
    "description": "Object.defineProperties(obj,props) Adds the named properties described by the given descriptors to an object -JS",
        "prefix":"objDefineProperties",
        "body":[
        "Object.defineProperties(${1:obj},${2:props})$0"
    ]
    },
    "Object.entries(obj) Returns an array of a given object's own enumerable property [key,value] pairs -JS": {
    "description": "Object.entries(obj) Returns an array of a given object's own enumerable property [key,value] pairs -JS",
        "prefix":"objEntries",
        "body":[
        "Object.entries(${1:obj})$0"
    ]
    },
    "Object.freeze(obj) Freezes an object: other code can't delete or change any properties -JS": {
    "description": "Object.freeze(obj) Freezes an object: other code can't delete or change any properties -JS",
        "prefix":"objFreeze",
        "body":[
        "Object.freeze(${1:obj})$0"
    ]
    },
    "Object.getOwnPropertyDescriptor(obj,prop) Returns a property descriptor for a named property on an object -JS": {
    "description": "Object.getOwnPropertyDescriptor(obj,prop) Returns a property descriptor for a named property on an object -JS",
        "prefix":"objGetOwnPropertyDescriptor",
        "body":[
        "Object.getOwnPropertyDescriptor(${1:obj},${2:prop})$0"
    ]
    },
    "Object.getOwnPropertyDescriptors(obj) Returns an object containing all own property descriptors for an object -JS": {
    "description": "Object.getOwnPropertyDescriptors(obj) Returns an object containing all own property descriptors for an object -JS",
        "prefix":"objGetOwnPropertyDescriptors",
        "body":[
        "Object.getOwnPropertyDescriptors(${1:obj})$0"
    ]
    },
    "Object.getOwnPropertyNames(obj) Returns an array containing the names of all of the given object's own enumerable and non-enumerable properties -JS": {
    "description": "Object.getOwnPropertyNames(obj) Returns an array containing the names of all of the given object's own enumerable and non-enumerable properties -JS",
        "prefix":"objGetOwnPropertyNames",
        "body":[
        "Object.getOwnPropertyNames(${1:obj})$0"
    ]
    },
    "Object.getOwnPropertySymbols(obj) Returns an array of all symbol properties found directly upon a given object -JS": {
    "description": "Object.getOwnPropertySymbols(obj) Returns an array of all symbol properties found directly upon a given object -JS",
        "prefix":"objGetOwnPropertySymbols",
        "body":[
        "Object.getOwnPropertySymbols(${1:obj})$0"
    ]
    },
    "Object.getPrototypeOf(obj) Returns an array of all symbol properties found directly upon a given object -JS": {
    "description": "Object.getPrototypeOf(obj) Returns an array of all symbol properties found directly upon a given object -JS",
        "prefix":"objGetPrototypeOf",
        "body":[
        "Object.getPrototypeOf(${1:obj})$0"
    ]
    },
    "Object.is(value1,value2) Compares if two values are distinguishable (ie. the same) -JS": {
    "description": "Object.is(value1,value2) Compares if two values are distinguishable (ie. the same) -JS",
        "prefix":"objIs",
        "body":[
        "Object.is(${1:value1},${2:value2})$0"
    ]
    },
    "Object.isExtensible(obj) Determines if extending of an object is allowed -JS": {
    "description": "Object.isExtensible(obj) Determines if extending of an object is allowed -JS",
        "prefix":"objIsExtensible",
        "body":[
        "Object.isExtensible(${1:obj})$0"
    ]
    },
    "Object.isFrozen(obj) Determines if an object was frozen -JS": {
    "description": "Object.isFrozen(obj) Determines if an object was frozen -JS",
        "prefix":"objIsFrozen",
        "body":[
        "Object.isFrozen(${1:obj})$0"
    ]
    },
    "Object.isSealed(obj) Determines if an object is sealed -JS": {
    "description": "Object.isSealed(obj) Determines if an object is sealed -JS",
        "prefix":"objIsSealed",
        "body":[
        "Object.isSealed(${1:obj})$0"
    ]
    },
    "Object.keys(obj) Returns an array containing the names of all of the given object's own enumerable properties -JS": {
    "description": "Object.keys(obj) Returns an array containing the names of all of the given object's own enumerable properties -JS",
        "prefix":"objKeys",
        "body":[
        "Object.keys(${1:obj})$0"
    ]
    },
    "Object.preventExtensions(obj) Prevents any extensions of an object -JS": {
    "description": "Object.preventExtensions(obj) Prevents any extensions of an object -JS",
        "prefix":"objPreventExtensions",
        "body":[
        "Object.preventExtensions(${1:obj})$0"
    ]
    },
    "Object.seal(obj) Prevents other code from deleting properties of an object -JS": {
    "description": "Object.seal(obj) Prevents other code from deleting properties of an object -JS",
        "prefix":"objSeal",
        "body":[
        "Object.seal(${1:obj})$0"
    ]
    },
    "Object.setPrototypeOf(obj,prototype) Sets the prototype (i.e.,the internal [[Prototype]] property) -JS": {
    "description": "Object.setPrototypeOf(obj,prototype) Sets the prototype (i.e.,the internal [[Prototype]] property) -JS",
        "prefix":"objSetPrototypeOf",
        "body":[
        "Object.setPrototypeOf(${1:obj},${2:prototype})$0"
    ]
    },
    "Object.values(obj) Returns an array of a given object's own enumerable values -JS": {
    "description": "Object.values(obj) Returns an array of a given object's own enumerable values -JS",
        "prefix":"objValues",
        "body":[
        "Object.values(${1:obj})$0"
    ]
    },
    "Object.toSource() Object's Code as String,-JS": {
    "description": "Object.toSource() Object's Code as String,-JS",
        "prefix":"ObjectToSource",
        "body":[
        "Object.toSource()$0"
    ]
    },
    "{} Object -JS": {
    "description": "{} Object -JS",
        "prefix":"obj",
        "body":[
        "{$1}$0"
    ]
    },
    "{} Object structure -JS": {
    "description": "{} Object structure -JS",
        "prefix":"objStructure",
        "body":[
        "{",
        "  ${1:property}: ${2:value},",
        "  ${3:property}: ${4:value}",
        "}$0"
    ]
    },
    "hasOwnProperty Object Boolean -JS": {
    "description": "hasOwnProperty Object Boolean -JS",
        "prefix":"hasOwnProp",
        "body":[
        "hasOwnProperty(${1:prop})$0"
    ]
    },
    "prototype.constructor -JS": {
    "description": "prototype.constructor -JS",
        "prefix":"prototypeConstructor",
        "body":[
        "prototype.constructor$0"
    ]
    },
    "Boolean.toSource() Boolean's Code as String,-JS": {
    "description": "Boolean.toSource() Boolean's Code as String,-JS",
        "prefix":"BooleanToSource",
        "body":[
        "Boolean.toSource()$0"
    ]
    },
    "Error.toSource() Error's Code as String,-JS": {
    "description": "Error.toSource() Error's Code as String,-JS",
        "prefix":"ErrorToSource",
        "body":[
        "Error.toSource()$0"
    ]
    },
    "Function.toSource() Function's Code as String,-JS": {
    "description": "Function.toSource() Function's Code as String,-JS",
        "prefix":"FunctionToSource",
        "body":[
        "Function.toSource()$0"
    ]
    },
    "Number.toSource() Number's Code as String,-JS": {
    "description": "Number.toSource() Number's Code as String,-JS",
        "prefix":"NumberToSource",
        "body":[
        "Number.toSource()$0"
    ]
    },
    "RegExp.toSource() RegExp's Code as String,-JS": {
    "description": "RegExp.toSource() RegExp's Code as String,-JS",
        "prefix":"RegExpToSource",
        "body":[
        "RegExp.toSource()$0"
    ]
    },
    "String.toSource() String's Code as String,-JS": {
    "description": "String.toSource() String's Code as String,-JS",
        "prefix":"StringToSource",
        "body":[
        "String.toSource()$0"
    ]
    },
    "Symbol.toSource() Symbol's Code as String,-JS": {
    "description": "Symbol.toSource() Symbol's Code as String,-JS",
        "prefix":"SymbolToSource",
        "body":[
        "Symbol.toSource()$0"
    ]
    },
    "backgroundColor -JS": {
    "description": "backgroundColor -JS",
        "prefix":"backgroundColor",
        "body":[
        "backgroundColor = $1"
    ]
    },
    "backgroundImage -JS": {
    "description": "backgroundImage -JS",
        "prefix":"backgroundImage",
        "body":[
        "backgroundImage = `url('${$1}')`"
    ]
    },
    "className -JS": {
    "description": "className -JS",
        "prefix":"className",
        "body":[
        "className = $1"
    ]
    },
    "classList.add() Add class -JS": {
    "description": "classList.add() Add class -JS",
        "prefix":"classListAdd",
        "body":[
        "classList.add($1)$0"
    ]
    },
    "classList.remove() Remove class -JS": {
    "description": "classList.remove() Remove class -JS",
        "prefix":"classListRemove",
        "body":[
        "classList.remove($1)$0"
    ]
    },
    "classList.item() Class index -JS": {
    "description": "classList.item() Class index -JS",
        "prefix":"classListItem",
        "body":[
        "classList.item(${1:0})$0"
    ]
    },
    "classList.toggle() Toggle class -JS": {
    "description": "classList.toggle() Toggle class -JS",
        "prefix":"classListToggle",
        "body":[
        "classList.toggle($1)$0"
    ]
    },
    "classList.toggle() set class and remove after conditional -JS": {
    "description": "classList.toggle() set class and remove after conditional -JS",
        "prefix":"classListToggleConditional",
        "body":[
        "classList.toggle($1,${2:i < 10})$0"
    ]
    },
    "classList.contains() Class exists,Boolean -JS": {
    "description": "classList.contains() Class exists,Boolean -JS",
        "prefix":"classListContains",
        "body":[
        "classList.contains($1)$0"
    ]
    },
    "'String' -JS": {
    "description": "'String' -JS",
        "prefix":"str",
        "body":[
        "'$1'$0"
    ]
    },
    "'String' Long Literal -JS": {
    "description": "'String' Long Literal -JS",
        "prefix":"strLongLit",
        "body":[
        "'$1 \\\\",
        "$2'$0"
    ]
    },
    "`Template` String -JS": {
    "description": "`Template` String -JS",
        "prefix":"strTempl",
        "body":[
        "`$1`$0"
    ]
    },
    "`String` Template MultiLine -JS": {
    "description": "`String` Template MultiLine -JS",
        "prefix":"strMultiLine",
        "body":[
        "`$1",
        "$2`$0"
    ]
    },
    "`String` Expression -JS": {
    "description": "`String` Expression -JS",
        "prefix":"strExp",
        "body":[
        "`$2${${1:expression}}$3`$0"
    ]
    },
    "Expression -JS": {
    "description": "Expression -JS",
        "prefix":"ex",
        "body":[
        "${${1:expression}}$0"
    ]
    },
    "substr() -JS": {
    "description": "substr() -JS",
        "prefix":"substr",
        "body":[
        "substr(${1:start},${2:length})$0"
    ]
    },
    "substring() -JS": {
    "description": "substring() -JS",
        "prefix":"substring",
        "body":[
        "substring(${1:indexStart},${2:indexEnd})$0"
    ]
    },
    "charAt() -JS": {
    "description": "charAt() -JS",
        "prefix":"charAt",
        "body":[
        "charAt(${1:index})$0"
    ]
    },
    "charCodeAt() UTF-16 code -JS": {
    "description": "charCodeAt() UTF-16 code -JS",
        "prefix":"charCodeAt",
        "body":[
        "charCodeAt($1)$0"
    ]
    },
    "length or window.length -JS": {
    "description": "length or window.length -JS",
        "prefix":"length",
        "body":[
        "length$0"
    ]
    },
    "String.fromCharCode(UTF-16 Code) -JS": {
    "description": "String.fromCharCode(UTF-16 Code) -JS",
        "prefix":"fromCharCode",
        "body":[
        "String.fromCharCode(${1:UTF-16 Code})$0"
    ]
    },
    "toLowerCase() -JS": {
    "description": "toLowerCase() -JS",
        "prefix":"toLowerCase",
        "body":[
        "toLowerCase()$0"
    ]
    },
    "toLowerCase().trim() -JS": {
    "description": "toLowerCase().trim() -JS",
        "prefix":"toLowerCaseTrim",
        "body":[
        "toLowerCase().trim()$0"
    ]
    },
    "toUpperCase() -JS": {
    "description": "toUpperCase() -JS",
        "prefix":"toUpperCase",
        "body":[
        "toUpperCase()$0"
    ]
    },
    "toUpperCase().trim() -JS": {
    "description": "toUpperCase().trim() -JS",
        "prefix":"toUpperCaseTrim",
        "body":[
        "toUpperCase().trim()$0"
    ]
    },
    "toLocaleLowerCase() -JS": {
    "description": "toLocaleLowerCase() -JS",
        "prefix":"toLocaleLowerCase",
        "body":[
        "toLocaleLowerCase()$0"
    ]
    },
    "trim() -JS": {
    "description": "trim() -JS",
        "prefix":"trim",
        "body":[
        "trim()$0"
    ]
    },
    "toLocaleLowerCase().trim() -JS": {
    "description": "toLocaleLowerCase().trim() -JS",
        "prefix":"toLocaleLowerCaseTrim",
        "body":[
        "toLocaleLowerCase().trim()$0"
    ]
    },
    "toLocaleUpperCase() -JS": {
    "description": "toLocaleUpperCase() -JS",
        "prefix":"toLocaleUpperCase",
        "body":[
        "toLocaleUpperCase()$0"
    ]
    },
    "toLocaleUpperCase().trim() -JS": {
    "description": "toLocaleUpperCase().trim() -JS",
        "prefix":"toLocaleUpperCaseTrim",
        "body":[
        "toLocaleUpperCase().trim()$0"
    ]
    },
    "ignoreCase -JS": {
    "description": "ignoreCase -JS",
        "prefix":"ignoreCase",
        "body":[
        "ignoreCase$0"
    ]
    },
    "indexOf() -JS": {
    "description": "indexOf() -JS",
        "prefix":"indexOf",
        "body":[
        "indexOf(${1:el})$0"
    ]
    },
    "lastIndexOf() Last Index of element -JS": {
    "description": "lastIndexOf() Last Index of element -JS",
        "prefix":"lastIndexOf",
        "body":[
        "lastIndexOf(${1:el})$0"
    ]
    },
    "hasChildNodes() Boolean -JS": {
    "description": "hasChildNodes() Boolean -JS",
        "prefix":"hasChildNodes",
        "body":[
        "hasChildNodes()$0"
    ]
    },
    "isEqualNode -JS": {
    "description": "isEqualNode -JS",
        "prefix":"isEqualNode",
        "body":[
        "isEqualNode(${1:otherNode})$0"
    ]
    },
    "nodeName -JS": {
    "description": "nodeName -JS",
        "prefix":"nodeName",
        "body":[
        "nodeName$0"
    ]
    },
    "nodeType -JS": {
    "description": "nodeType -JS",
        "prefix":"nodeType",
        "body":[
        "nodeType$0"
    ]
    },
    "nodeValue -JS": {
    "description": "nodeValue -JS",
        "prefix":"nodeValue",
        "body":[
        "nodeValue$0"
    ]
    },
    "childNodes -JS": {
    "description": "childNodes -JS",
        "prefix":"childNodes",
        "body":[
        "childNodes$0"
    ]
    },
    "firstChild -JS": {
    "description": "firstChild -JS",
        "prefix":"firstChild",
        "body":[
        "firstChild$0"
    ]
    },
    "lastChild -JS": {
    "description": "lastChild -JS",
        "prefix":"lastChild",
        "body":[
        "lastChild$0"
    ]
    },
    "cloneNode -JS": {
    "description": "cloneNode -JS",
        "prefix":"cloneNode",
        "body":[
        "cloneNode(${1:true})$0"
    ]
    },
    "parentElement -JS": {
    "description": "parentElement -JS",
        "prefix":"parentElement",
        "body":[
        "parentElement$0"
    ]
    },
    "parentNode -JS": {
    "description": "parentNode -JS",
        "prefix":"parentNode",
        "body":[
        "parentNode$0"
    ]
    },
    "compareDocumentPosition(otherNode) -JS": {
    "description": "compareDocumentPosition(otherNode) -JS",
        "prefix":"compareDocumentPosition",
        "body":[
        "compareDocumentPosition(otherNode)$0"
    ]
    },
    "appendChild -JS": {
    "description": "appendChild -JS",
        "prefix":"appendChild",
        "body":[
        "appendChild(${1:aChild})$0"
    ]
    },
    "prepend -JS": {
    "description": "prepend -JS",
        "prefix":"prepend",
        "body":[
        "prepend(${1:aChild})$0"
    ]
    },
    "nextSibling -JS": {
    "description": "nextSibling -JS",
        "prefix":"nextSibling",
        "body":[
        "nextSibling$0"
    ]
    },
    "previousSibling -JS": {
    "description": "previousSibling -JS",
        "prefix":"previousSibling",
        "body":[
        "previousSibling$0"
    ]
    },
    "nextElementSibling -JS": {
    "description": "nextElementSibling -JS",
        "prefix":"nextElementSibling",
        "body":[
        "nextElementSibling$0"
    ]
    },
    "previousElementSibling -JS": {
    "description": "previousElementSibling -JS",
        "prefix":"previousElementSibling",
        "body":[
        "previousElementSibling$0"
    ]
    },
    "insertBefore -JS": {
    "description": "insertBefore -JS",
        "prefix":"insertBefore",
        "body":[
        "insertBefore(${1:newNode},${2:referenceNode})$0"
    ]
    },
    "insertAfter -JS": {
    "description": "insertAfter -JS",
        "prefix":"insertAfter",
        "body":[
        "insertBefore(${1:newNode},${2:referenceNode}.nextSibling)$0"
    ]
    },
    "removeChild -JS": {
    "description": "removeChild -JS",
        "prefix":"removeChild",
        "body":[
        "removeChild(${1:child})$0"
    ]
    },
    "replaceChild -JS": {
    "description": "replaceChild -JS",
        "prefix":"replaceChild",
        "body":[
        "replaceChild(${1:newChild},${2:oldChild})$0"
    ]
    },
    "replaceWith -JS": {
    "description": "replaceWith -JS",
        "prefix":"replaceWith",
        "body":[
        "replaceWith(${1:newNode})$0"
    ]
    },
    "focus() or window.focus() -JS": {
    "description": "focus() or window.focus() -JS",
        "prefix":"focus",
        "body":[
        "focus()$0"
    ]
    },
    "blur() or window.blur() -JS": {
    "description": "blur() or window.blur() -JS",
        "prefix":"blur",
        "body":[
        "blur()$0"
    ]
    },
    "click() -JS": {
    "description": "click() -JS",
        "prefix":"click",
        "body":[
        "click()$0"
    ]
    },
    "addEventListener('event',listener) -JS": {
    "description": "addEventListener('event',listener) -JS",
        "prefix":"addEventListener",
        "body":[
        "addEventListener('$1',${1:ActionName})$0"
    ]
    },
    "addEventListener('event',listener,{passive:true}) -JS": {
    "description": "addEventListener('event',listener,{passive:true}) -JS",
        "prefix":"addEventListenerPassive",
        "body":[
        "addEventListener('$1',${1:ActionName},{passive:true})$0"
    ]
    },
    "removeEventListener('event',listener) -JS": {
    "description": "removeEventListener('event',listener) -JS",
        "prefix":"removeEventListener",
        "body":[
        "removeEventListener('$1',$1)$0"
    ]
    },
    "removeEventListener('event',listener,{passive:true}) -JS": {
    "description": "removeEventListener('event',listener,{passive:true}) -JS",
        "prefix":"removeEventListenerPassive",
        "body":[
        "removeEventListener('$1',${1:ActionName},{passive:true})$0"
    ]
    },
    "preventDefault() Behavior -JS": {
    "description": "preventDefault() Behavior -JS",
        "prefix":"preventDef",
        "body":[
        "preventDefault()$0"
    ]
    },
    "fetch -JS": {
    "description": "fetch -JS",
        "prefix":"fetch",
        "body":[
        "fetch(${1:url})",
          ".then(response => response$2)",
          ".then(data =>{",
          "    console.log('data:',data)$0",
          "}).catch(error => console.log('ERROR:',error))"
    ]
    },
    "fetch(url,{method:'GET',headers:{'Authorization':'Basic '+credential}}) -JS": {
    "description": "fetch(url,{method:'GET',headers:{'Authorization':'Basic '+credential}}) -JS",
        "prefix":"fetchGET",
        "body":[
        "fetch(url,{",
        "  method:'GET',",
        "  headers:{",
        "    'Authorization':'Basic '+credential",
        "  }",
        "})",
        "  .then(response => response)",
        "  .then(data =>{",
        "    console.log(`data:`,data)$0",
        "  }).catch(error => console.log('ERROR:',error))"
    ]
    },
    "fetch(url,{method:'POST',body:JSON.stringify(body)}) -JS": {
    "description": "fetch(url,{method:'POST',body:JSON.stringify(body)}) -JS",
        "prefix":"fetchPOST",
        "body":[
        "fetch(url,{",
        "  method:'POST',",
        "  headers:{",
        "    'Accept':'application/json',",
        "    'Content-Type':'application/json',",
        "    'Authorization':'Basic '+credential",
        "  },",
        "  body:JSON.stringify(body)",
        "})",
        "  .then(response => response)",
        "  .then(data =>{",
        "    if (data.status === 200) console.log(`Success.`)",
        "    $0",
        "  }).catch(error => console.log('ERROR:',error))"
    ]
    },
    "fetch(url,{method:'PUT',body:JSON.stringify(body)}) -JS": {
    "description": "fetch(url,{method:'PUT',body:JSON.stringify(body)}) -JS",
        "prefix":"fetchPUT",
        "body":[
        "fetch(url,{",
        "  method:'PUT',",
        "  headers:{",
        "    'Accept':'application/json',",
        "    'Content-Type':'application/json',",
        "    'Authorization':'Basic '+credential",
        "  },",
        "  body:JSON.stringify(body)",
        "})",
        "  .then(response => response)",
        "  .then(data =>{",
        "    if (data.status === 200) console.log(`Success.`)",
        "    $0",
        "  }).catch(error => console.log('ERROR:',error))"
    ]
    },
    "fetch(url,{method:'DELETE',body:JSON.stringify(body)}) -JS": {
    "description": "fetch(url,{method:'DELETE',body:JSON.stringify(body)}) -JS",
        "prefix":"fetchDELETE",
        "body":[
        "fetch(url,{",
        "  method:'DELETE',",
        "  headers:{",
        "    'Accept':'application/json',",
        "    'Content-Type':'application/json',",
        "    'Authorization':'Basic '+credential",
        "  },",
        "  body:JSON.stringify(body)",
        "})",
        "  .then(response => response)",
        "  .then(data =>{",
        "    if (data.status === 200) console.log(`Success.`)",
        "    $0",
        "  }).catch(error => console.log('ERROR:',error))"
    ]
    },
    "fetch response to Text -JS": {
    "description": "fetch response to Text -JS",
        "prefix":"fetchText",
        "body":[
        "fetch(${1:url})",
        "  .then(response => response.text())",
        "  .then(data =>{",
        "      console.log('data:',data)$0",
        "  }).catch(error => console.log('ERROR:',error))"
    ]
    },
    "fetch response to JSON -JS": {
    "description": "fetch response to JSON -JS",
        "prefix":"fetchJSON",
        "body":[
        "fetch(${1:url})",
        "  .then(response => response.json())",
        "  .then(data =>{",
        "      console.log('data:',data)$0",
        "  }).catch(error => console.log('ERROR:',error))"
    ]
    },
    "fetch response to Blob -JS": {
    "description": "fetch response to Blob -JS",
        "prefix":"fetchBlob",
        "body":[
        "fetch(${1:url})",
        "  .then(response => response.blob())",
        "  .then(data =>{",
        "      console.log('data:',data)$0",
        "  }).catch(error => console.log('ERROR:',error))"
    ]
    },
    "then -JS": {
    "description": "then -JS",
        "prefix":"then",
        "body":[
        "then($1)$0"
    ]
    },
    "catch -JS": {
    "description": "catch -JS",
        "prefix":"catch",
        "body":[
        "catch((error) =>{",
        "  console.log(error)",
        "})$0"
    ]
    },
    "text -JS": {
    "description": "text -JS",
        "prefix":"text",
        "body":[
        "text()$0"
    ]
    },
    "blob -JS": {
    "description": "blob -JS",
        "prefix":"blob",
        "body":[
        "blob()$0"
    ]
    },
    "arrayBuffer -JS": {
    "description": "arrayBuffer -JS",
        "prefix":"arrayBuffer",
        "body":[
        "arrayBuffer()$0"
    ]
    },
    "formData -JS": {
    "description": "formData -JS",
        "prefix":"formData",
        "body":[
        "formData()$0"
    ]
    },
    "json() -JS": {
    "description": "json() -JS",
        "prefix":"json",
        "body":[
        "json()$0"
    ]
    },
    "JSON.stringify() -JS": {
    "description": "JSON.stringify() -JS",
        "prefix":"JSONStringify",
        "body":[
        "JSON.stringify($1)$0"
    ]
    },
    "JSON.parse() -JS": {
    "description": "JSON.parse() -JS",
        "prefix":"JSONParse",
        "body":[
        "JSON.parse($1)$0"
    ]
    },
    "Class,Class expression named/unamed -JS": {
    "description": "Class,Class expression named/unamed -JS",
        "prefix":"clas",
        "body":[
        "class ${1:ClassName}{",
        "  constructor($2){",
        "    $3",
        "  }",
        "}",
        "$0"
    ]
    },
    "Class: constructor -JS": {
    "description": "Class: constructor -JS",
        "prefix":"construc",
        "body":[
        "constructor($1){",
        "  $2",
        "}",
        "$0"
    ]
    },
    "Class: extends,child of class -JS": {
    "description": "Class: extends,child of class -JS",
        "prefix":"ext",
        "body":[
        "extends ${1:ClassName}"
    ]
    },
    "Class: super() to allow override existing methods -JS": {
    "description": "Class: super() to allow override existing methods -JS",
        "prefix":"super",
        "body":[
        "super()$0"
    ]
    },
    "Class: static method -JS": {
    "description": "Class: static method -JS",
        "prefix":"static",
        "body":[
        "static ${1:staticMethod}(){",
        "  $2",
        "}",
        "$0,"
    ]
    },
    "Promise -JS": {
    "description": "Promise -JS",
        "prefix":"promise",
        "body":[
        "new Promise((resolve,reject) =>{",
        "  resolve($1)",
        "  reject($2)",
        "})$0"
    ]
    },
    "Promise.all -JS": {
    "description": "Promise.all -JS",
        "prefix":"promiseAll",
        "body":[
        "Promise.all([${1:p1},${2:p2}])",
        "  .then((data) =>{",
        "    $3",
        "  })",
        ".catch(error => console.log('ERROR:',error))$0"
    ]
    },
    "window.window -JS": {
    "description": "window.window -JS",
        "prefix":"window",
        "body":[
        "window$0"
    ]
    },
    "window.messageManager -JS": {
    "description": "window.messageManager -JS",
        "prefix":"messageManager",
        "body":[
        "window.messageManager$0"
    ]
    },
    "window.windowState -JS": {
    "description": "window.windowState -JS",
        "prefix":"windowState",
        "body":[
        "window.windowState$0"
    ]
    },
    "window.confirm(message) -JS": {
    "description": "window.confirm(message) -JS",
        "prefix":"confirm",
        "body":[
        "confirm(${1:message})$0"
    ]
    },
    "window.alert(message) -JS": {
    "description": "window.alert(message) -JS",
        "prefix":"alert",
        "body":[
        "alert(${1:message})$0"
    ]
    },
    "window.applicationCache -JS": {
    "description": "window.applicationCache -JS",
        "prefix":"applicationCache",
        "body":[
        "applicationCache$0"
    ]
    },
    "window.closed -JS": {
    "description": "window.closed -JS",
        "prefix":"closed",
        "body":[
        "closed$0"
    ]
    },
    "window.crypto -JS": {
    "description": "window.crypto -JS",
        "prefix":"crypto",
        "body":[
        "crypto$0"
    ]
    },
    "window.devicePixelRatio -JS": {
    "description": "window.devicePixelRatio -JS",
        "prefix":"devicePixelRatio",
        "body":[
        "devicePixelRatio$0"
    ]
    },
    "window.document -JS": {
    "description": "window.document -JS",
        "prefix":"document",
        "body":[
        "document$0"
    ]
    },
    "window.frameElement -JS": {
    "description": "window.frameElement -JS",
        "prefix":"frameElement",
        "body":[
        "frameElement$0"
    ]
    },
    "window.frames -JS": {
    "description": "window.frames -JS",
        "prefix":"frames",
        "body":[
        "frames$0"
    ]
    },
    "window.fullScreen -JS": {
    "description": "window.fullScreen -JS",
        "prefix":"fullScreen",
        "body":[
        "fullScreen$0"
    ]
    },
    "window.history -JS": {
    "description": "window.history -JS",
        "prefix":"history",
        "body":[
        "history$0"
    ]
    },
    "window.innerHeight -JS": {
    "description": "window.innerHeight -JS",
        "prefix":"innerHeight",
        "body":[
        "innerHeight$0"
    ]
    },
    "window.innerWidth -JS": {
    "description": "window.innerWidth -JS",
        "prefix":"innerWidth",
        "body":[
        "innerWidth$0"
    ]
    },
    "window.isSecureContext -JS": {
    "description": "window.isSecureContext -JS",
        "prefix":"isSecureContext",
        "body":[
        "isSecureContext$0"
    ]
    },
    "window.location -JS": {
    "description": "window.location -JS",
        "prefix":"location",
        "body":[
        "location$0"
    ]
    },
    "window.locationbar -JS": {
    "description": "window.locationbar -JS",
        "prefix":"locationbar",
        "body":[
        "locationbar$0"
    ]
    },
    "window.menubar -JS": {
    "description": "window.menubar -JS",
        "prefix":"menubar",
        "body":[
        "menubar$0"
    ]
    },
    "window.name -JS": {
    "description": "window.name -JS",
        "prefix":"name",
        "body":[
        "name$0"
    ]
    },
    "window.navigator -JS": {
    "description": "window.navigator -JS",
        "prefix":"navigator",
        "body":[
        "navigator$0"
    ]
    },
    "window.onappinstalled -JS": {
    "description": "window.onappinstalled -JS",
        "prefix":"onappinstalled",
        "body":[
        "onappinstalled$0"
    ]
    },
    "window.onbeforeinstallprompt -JS": {
    "description": "window.onbeforeinstallprompt -JS",
        "prefix":"onbeforeinstallprompt",
        "body":[
        "onbeforeinstallprompt$0"
    ]
    },
    "window.ondevicelight -JS": {
    "description": "window.ondevicelight -JS",
        "prefix":"ondevicelight",
        "body":[
        "ondevicelight$0"
    ]
    },
    "window.ondevicemotion -JS": {
    "description": "window.ondevicemotion -JS",
        "prefix":"ondevicemotion",
        "body":[
        "ondevicemotion$0"
    ]
    },
    "window.ondeviceorientation -JS": {
    "description": "window.ondeviceorientation -JS",
        "prefix":"ondeviceorientation",
        "body":[
        "ondeviceorientation$0"
    ]
    },
    "window.onuserproximity -JS": {
    "description": "window.onuserproximity -JS",
        "prefix":"onuserproximity",
        "body":[
        "onuserproximity$0"
    ]
    },
    "window.onvrdisplayactivate -JS": {
    "description": "window.onvrdisplayactivate -JS",
        "prefix":"onvrdisplayactivate",
        "body":[
        "onvrdisplayactivate$0"
    ]
    },
    "window.onvrdisplayconnect -JS": {
    "description": "window.onvrdisplayconnect -JS",
        "prefix":"onvrdisplayconnect",
        "body":[
        "onvrdisplayconnect$0"
    ]
    },
    "window.onvrdisplaydeactivate -JS": {
    "description": "window.onvrdisplaydeactivate -JS",
        "prefix":"onvrdisplaydeactivate",
        "body":[
        "onvrdisplaydeactivate$0"
    ]
    },
    "window.onvrdisplaydisconnect -JS": {
    "description": "window.onvrdisplaydisconnect -JS",
        "prefix":"onvrdisplaydisconnect",
        "body":[
        "onvrdisplaydisconnect$0"
    ]
    },
    "window.onvrdisplaypresentchange -JS": {
    "description": "window.onvrdisplaypresentchange -JS",
        "prefix":"onvrdisplaypresentchange",
        "body":[
        "onvrdisplaypresentchange$0"
    ]
    },
    "window.opener -JS": {
    "description": "window.opener -JS",
        "prefix":"opener",
        "body":[
        "opener$0"
    ]
    },
    "window.outerHeight -JS": {
    "description": "window.outerHeight -JS",
        "prefix":"outerHeight",
        "body":[
        "outerHeight$0"
    ]
    },
    "window.outerWidth -JS": {
    "description": "window.outerWidth -JS",
        "prefix":"outerWidth",
        "body":[
        "outerWidth$0"
    ]
    },
    "window.pageXOffset -JS": {
    "description": "window.pageXOffset -JS",
        "prefix":"pageXOffset",
        "body":[
        "pageXOffset$0"
    ]
    },
    "window.pageYOffset -JS": {
    "description": "window.pageYOffset -JS",
        "prefix":"pageYOffset",
        "body":[
        "pageYOffset$0"
    ]
    },
    "window.parent -JS": {
    "description": "window.parent -JS",
        "prefix":"parent",
        "body":[
        "parent$0"
    ]
    },
    "window.performance -JS": {
    "description": "window.performance -JS",
        "prefix":"performance",
        "body":[
        "performance$0"
    ]
    },
    "window.personalbar -JS": {
    "description": "window.personalbar -JS",
        "prefix":"personalbar",
        "body":[
        "personalbar$0"
    ]
    },
    "window.screen -JS": {
    "description": "window.screen -JS",
        "prefix":"screen",
        "body":[
        "screen$0"
    ]
    },
    "window.screenX -JS": {
    "description": "window.screenX -JS",
        "prefix":"screenX",
        "body":[
        "screenX$0"
    ]
    },
    "window.screenY -JS": {
    "description": "window.screenY -JS",
        "prefix":"screenY",
        "body":[
        "screenY$0"
    ]
    },
    "window.scrollbars -JS": {
    "description": "window.scrollbars -JS",
        "prefix":"scrollbars",
        "body":[
        "scrollbars$0"
    ]
    },
    "window.scrollX -JS": {
    "description": "window.scrollX -JS",
        "prefix":"scrollX",
        "body":[
        "scrollX$0"
    ]
    },
    "window.scrollY -JS": {
    "description": "window.scrollY -JS",
        "prefix":"scrollY",
        "body":[
        "scrollY$0"
    ]
    },
    "window.self -JS": {
    "description": "window.self -JS",
        "prefix":"self",
        "body":[
        "self$0"
    ]
    },
    "window.speechSynthesis -JS": {
    "description": "window.speechSynthesis -JS",
        "prefix":"speechSynthesis",
        "body":[
        "speechSynthesis$0"
    ]
    },
    "window.status -JS": {
    "description": "window.status -JS",
        "prefix":"status",
        "body":[
        "status$0"
    ]
    },
    "window.statusbar -JS": {
    "description": "window.statusbar -JS",
        "prefix":"statusbar",
        "body":[
        "statusbar$0"
    ]
    },
    "window.toolbar -JS": {
    "description": "window.toolbar -JS",
        "prefix":"toolbar",
        "body":[
        "toolbar$0"
    ]
    },
    "window.top -JS": {
    "description": "window.top -JS",
        "prefix":"top",
        "body":[
        "top$0"
    ]
    },
    "window.URL -JS": {
    "description": "window.URL -JS",
        "prefix":"URL",
        "body":[
        "URL$0"
    ]
    },
    "window.print() -JS": {
    "description": "window.print() -JS",
        "prefix":"print",
        "body":[
        "window.print()$0"
    ]
    },
    "window.close() -JS": {
    "description": "window.close() -JS",
        "prefix":"close",
        "body":[
        "close()$0"
    ]
    },
    "window.getAttention() -JS": {
    "description": "window.getAttention() -JS",
        "prefix":"getAttention",
        "body":[
        "getAttention()$0"
    ]
    },
    "window.getSelection() -JS": {
    "description": "window.getSelection() -JS",
        "prefix":"getSelection",
        "body":[
        "getSelection()$0"
    ]
    },
    "window.minimize() -JS": {
    "description": "window.minimize() -JS",
        "prefix":"minimize",
        "body":[
        "minimize()$0"
    ]
    },
    "window.stop() -JS": {
    "description": "window.stop() -JS",
        "prefix":"stop",
        "body":[
        "stop()$0"
    ]
    },
    "window.cancelAnimationFrame(requestID) -JS": {
    "description": "window.cancelAnimationFrame(requestID) -JS",
        "prefix":"cancelAnimationFrame",
        "body":[
        "cancelAnimationFrame(${1:requestID})$0"
    ]
    },
    "window.cancelIdleCallback(handle) -JS": {
    "description": "window.cancelIdleCallback(handle) -JS",
        "prefix":"cancelIdleCallback",
        "body":[
        "cancelIdleCallback(${1:handle})$0"
    ]
    },
    "window.clearImmediate(immediateID) -JS": {
    "description": "window.clearImmediate(immediateID) -JS",
        "prefix":"clearImmediate",
        "body":[
        "clearImmediate(${1:immediateID})$0"
    ]
    },
    "window.matchMedia(mediaQueryString) -JS": {
    "description": "window.matchMedia(mediaQueryString) -JS",
        "prefix":"matchMedia",
        "body":[
        "matchMedia(${1:mediaQueryString})$0"
    ]
    },
    "window.requestAnimationFrame(callback) -JS": {
    "description": "window.requestAnimationFrame(callback) -JS",
        "prefix":"requestAnimationFrame",
        "body":[
        "requestAnimationFrame(${1:callback})$0"
    ]
    },
    "window.requestIdleCallback(callback) -JS": {
    "description": "window.requestIdleCallback(callback) -JS",
        "prefix":"requestIdleCallback",
        "body":[
        "requestIdleCallback(${1:callback})$0"
    ]
    },
    "window.updateCommands('sCommandName') -JS": {
    "description": "window.updateCommands('sCommandName') -JS",
        "prefix":"updateCommands",
        "body":[
        "updateCommands('${1:sCommandName}')$0"
    ]
    },
    "window.getComputedStyle(elem,null) -JS": {
    "description": "window.getComputedStyle(elem,null) -JS",
        "prefix":"getComputedStyle",
        "body":[
        "getComputedStyle(${1:elem},null)$0"
    ]
    },
    "window.moveBy(deltaX,deltaY) -JS": {
    "description": "window.moveBy(deltaX,deltaY) -JS",
        "prefix":"moveBy",
        "body":[
        "moveBy(${1:deltaX},${2:deltaY})$0"
    ]
    },
    "window.resizeBy(deltaX,deltaY) -JS": {
    "description": "window.resizeBy(deltaX,deltaY) -JS",
        "prefix":"resizeBy",
        "body":[
        "resizeBy(${1:xDelta},${2:Ydelta})$0"
    ]
    },
    "window.resizeTo(aWidth,aHeight) -JS": {
    "description": "window.resizeTo(aWidth,aHeight) -JS",
        "prefix":"resizeTo",
        "body":[
        "resizeTo(${1:aWidth},${2:aHeight})$0"
    ]
    },
    "window.moveTo(x,y) -JS": {
    "description": "window.moveTo(x,y) -JS",
        "prefix":"moveTo",
        "body":[
        "moveTo(${1:x},${2:y})$0"
    ]
    },
    "window.scrollBy(x,y) -JS": {
    "description": "window.scrollBy(x,y) -JS",
        "prefix":"scrollBy",
        "body":[
        "scrollBy(${1:x},${2:y})$0"
    ]
    },
    "window.scroll(x-coord,y-coord) -JS": {
    "description": "window.scroll(x-coord,y-coord) -JS",
        "prefix":"scroll",
        "body":[
        "scroll(${1:x-coord},${2:y-coord})$0"
    ]
    },
    "window.scrollTo(x-coord,y-coord) -JS": {
    "description": "window.scrollTo(x-coord,y-coord) -JS",
        "prefix":"scrollTo",
        "body":[
        "scrollTo(${1:x-coord},${2:y-coord})$0"
    ]
    },
    "window.open(url,windowName,windowFeatures) -JS": {
    "description": "window.open(url,windowName,windowFeatures) -JS",
        "prefix":"open",
        "body":[
        "open(${1:url},${2:windowName},${3:windowFeatures})$0"
    ]
    },
    "window.postMessage(message, targetOrigin, [transfer]) -JS": {
    "description": "window.postMessage(message, targetOrigin, [transfer]) -JS",
        "prefix":"postMessage",
        "body":[
        "postMessage(${1:message},${2:targetOrigin},${3:transfer})$0"
    ]
    },
    "window.prompt -JS": {
    "description": "window.prompt -JS",
        "prefix":"prompt",
        "body":[
        "prompt(${1:message},${2:defaultValue})$0"
    ]
    },
    "performance.mark(name) -JS": {
    "description": "performance.mark(name) -JS",
        "prefix":"performanceMark",
        "body":[
        "performance.mark(${1:name})$0"
    ]
    },
    "mark(name) Performance -JS": {
    "description": "mark(name) Performance -JS",
        "prefix":"mark",
        "body":[
        "mark(${1:name})$0"
    ]
    },
    "performance.now() -JS": {
    "description": "performance.now() -JS",
        "prefix":"performanceNow",
        "body":[
        "performance.now()$0"
    ]
    },
    "performance.timing -JS": {
    "description": "performance.timing -JS",
        "prefix":"performanceTiming",
        "body":[
        "performance.timing$0"
    ]
    },
    "timing Performance -JS": {
    "description": "timing Performance -JS",
        "prefix":"timing",
        "body":[
        "timing$0"
    ]
    },
    "performance.navigation -JS": {
    "description": "performance.navigation -JS",
        "prefix":"performanceNavigation",
        "body":[
        "performance.navigation$0"
    ]
    },
    "navigation Performance -JS": {
    "description": "navigation Performance -JS",
        "prefix":"navigation",
        "body":[
        "navigation$0"
    ]
    },
    "performance.memory -[Chrome]JS": {
    "description": "performance.memory -[Chrome]JS",
        "prefix":"performanceMemory",
        "body":[
        "performance.memory$0"
    ]
    },
    "memory Performance -[Chrome]JS": {
    "description": "memory Performance -[Chrome]JS",
        "prefix":"memory",
        "body":[
        "memory$0"
    ]
    },
    "setInterval() -JS": {
    "description": "setInterval() -JS",
        "prefix":"setInterval",
        "body":[
        "setInterval(${1:function},${2:3000})$0"
    ]
    },
    "clearInterval() -JS": {
    "description": "clearInterval() -JS",
        "prefix":"clearInterval",
        "body":[
        "clearInterval(${1:function})$0"
    ]
    },
    "setTimeout() -JS": {
    "description": "setTimeout() -JS",
        "prefix":"setTimeout",
        "body":[
        "setTimeout(${1:function},${2:3000})$0"
    ]
    },
    "clearTimeout() -JS": {
    "description": "clearTimeout() -JS",
        "prefix":"clearTimeout",
        "body":[
        "clearTimeout(${1:function})$0"
    ]
    },
    "execCommand('backColor') -JS": {
    "description": "execCommand('backColor') -JS",
        "prefix":"execBackColor",
        "body":[
        "document.execCommand('backColor')$0"
    ]
    },
    "execCommand('bold') -JS": {
    "description": "execCommand('bold') -JS",
        "prefix":"execBold",
        "body":[
        "document.execCommand('bold')$0"
    ]
    },
    "execCommand('contentReadOnly') -JS": {
    "description": "execCommand('contentReadOnly') -JS",
        "prefix":"execContentReadOnly",
        "body":[
        "document.execCommand('contentReadOnly')$0"
    ]
    },
    "execCommand('copy') -JS": {
    "description": "execCommand('copy') -JS",
        "prefix":"execCopy",
        "body":[
        "document.execCommand('copy')$0"
    ]
    },
    "execCommand('createLink') -JS": {
    "description": "execCommand('createLink') -JS",
        "prefix":"execCreateLink",
        "body":[
        "document.execCommand('createLink')$0"
    ]
    },
    "execCommand('cut') -JS": {
    "description": "execCommand('cut') -JS",
        "prefix":"execCut",
        "body":[
        "document.execCommand('cut')$0"
    ]
    },
    "execCommand('decreaseFontSize') -JS": {
    "description": "execCommand('decreaseFontSize') -JS",
        "prefix":"execDecreaseFontSize",
        "body":[
        "document.execCommand('decreaseFontSize')$0"
    ]
    },
    "execCommand('delete') -JS": {
    "description": "execCommand('delete') -JS",
        "prefix":"execDelete",
        "body":[
        "document.execCommand('delete')$0"
    ]
    },
    "execCommand('enableInlineTableEditing') -JS": {
    "description": "execCommand('enableInlineTableEditing') -JS",
        "prefix":"execEnableInlineTableEditing",
        "body":[
        "document.execCommand('enableInlineTableEditing')$0"
    ]
    },
    "execCommand('enableObjectResizing') -JS": {
    "description": "execCommand('enableObjectResizing') -JS",
        "prefix":"execEnableObjectResizing",
        "body":[
        "document.execCommand('enableObjectResizing')$0"
    ]
    },
    "execCommand('fontName') -JS": {
    "description": "execCommand('fontName') -JS",
        "prefix":"execFontName",
        "body":[
        "document.execCommand('fontName')$0"
    ]
    },
    "execCommand('fontSize') -JS": {
    "description": "execCommand('fontSize') -JS",
        "prefix":"execFontSize",
        "body":[
        "document.execCommand('fontSize')$0"
    ]
    },
    "execCommand('foreColor') -JS": {
    "description": "execCommand('foreColor') -JS",
        "prefix":"execForeColor",
        "body":[
        "document.execCommand('foreColor')$0"
    ]
    },
    "execCommand('formatBlock') -JS": {
    "description": "execCommand('formatBlock') -JS",
        "prefix":"execFormatBlock",
        "body":[
        "document.execCommand('formatBlock')$0"
    ]
    },
    "execCommand('forwardDelete') -JS": {
    "description": "execCommand('forwardDelete') -JS",
        "prefix":"execForwardDelete",
        "body":[
        "document.execCommand('forwardDelete')$0"
    ]
    },
    "execCommand('heading') -JS": {
    "description": "execCommand('heading') -JS",
        "prefix":"execHeading",
        "body":[
        "document.execCommand('heading')$0"
    ]
    },
    "execCommand('hiliteColor') -JS": {
    "description": "execCommand('hiliteColor') -JS",
        "prefix":"execHiliteColor",
        "body":[
        "document.execCommand('hiliteColor')$0"
    ]
    },
    "execCommand('increaseFontSize') -JS": {
    "description": "execCommand('increaseFontSize') -JS",
        "prefix":"execIncreaseFontSize",
        "body":[
        "document.execCommand('increaseFontSize')$0"
    ]
    },
    "execCommand('indent') -JS": {
    "description": "execCommand('indent') -JS",
        "prefix":"execIndent",
        "body":[
        "document.execCommand('indent')$0"
    ]
    },
    "execCommand('insertBrOnReturn') -JS": {
    "description": "execCommand('insertBrOnReturn') -JS",
        "prefix":"execInsertBrOnReturn",
        "body":[
        "document.execCommand('insertBrOnReturn')$0"
    ]
    },
    "execCommand('insertHorizontalRule') -JS": {
    "description": "execCommand('insertHorizontalRule') -JS",
        "prefix":"execInsertHorizontalRule",
        "body":[
        "document.execCommand('insertHorizontalRule')$0"
    ]
    },
    "execCommand('insertHTML') -JS": {
    "description": "execCommand('insertHTML') -JS",
        "prefix":"execInsertHTML",
        "body":[
        "document.execCommand('insertHTML')$0"
    ]
    },
    "execCommand('insertImage') -JS": {
    "description": "execCommand('insertImage') -JS",
        "prefix":"execInsertImage",
        "body":[
        "document.execCommand('insertImage')$0"
    ]
    },
    "execCommand('insertOrderedList') -JS": {
    "description": "execCommand('insertOrderedList') -JS",
        "prefix":"execInsertOrderedList",
        "body":[
        "document.execCommand('insertOrderedList')$0"
    ]
    },
    "execCommand('insertUnorderedList') -JS": {
    "description": "execCommand('insertUnorderedList') -JS",
        "prefix":"execInsertUnorderedList",
        "body":[
        "document.execCommand('insertUnorderedList')$0"
    ]
    },
    "execCommand('insertParagraph') -JS": {
    "description": "execCommand('insertParagraph') -JS",
        "prefix":"execInsertParagraph",
        "body":[
        "document.execCommand('insertParagraph')$0"
    ]
    },
    "execCommand('insertText') -JS": {
    "description": "execCommand('insertText') -JS",
        "prefix":"execInsertText",
        "body":[
        "document.execCommand('insertText')$0"
    ]
    },
    "execCommand('italic') -JS": {
    "description": "execCommand('italic') -JS",
        "prefix":"execItalic",
        "body":[
        "document.execCommand('italic')$0"
    ]
    },
    "execCommand('justifyCenter') -JS": {
    "description": "execCommand('justifyCenter') -JS",
        "prefix":"execJustifyCenter",
        "body":[
        "document.execCommand('justifyCenter')$0"
    ]
    },
    "execCommand('justifyFull') -JS": {
    "description": "execCommand('justifyFull') -JS",
        "prefix":"execJustifyFull",
        "body":[
        "document.execCommand('justifyFull')$0"
    ]
    },
    "execCommand('justifyLeft') -JS": {
    "description": "execCommand('justifyLeft') -JS",
        "prefix":"execJustifyLeft",
        "body":[
        "document.execCommand('justifyLeft')$0"
    ]
    },
    "execCommand('justifyRight') -JS": {
    "description": "execCommand('justifyRight') -JS",
        "prefix":"execJustifyRight",
        "body":[
        "document.execCommand('justifyRight')$0"
    ]
    },
    "execCommand('outdent') -JS": {
    "description": "execCommand('outdent') -JS",
        "prefix":"execOutdent",
        "body":[
        "document.execCommand('outdent')$0"
    ]
    },
    "execCommand('paste') -JS": {
    "description": "execCommand('paste') -JS",
        "prefix":"execPaste",
        "body":[
        "document.execCommand('paste')$0"
    ]
    },
    "execCommand('redo') -JS": {
    "description": "execCommand('redo') -JS",
        "prefix":"execRedo",
        "body":[
        "document.execCommand('redo')$0"
    ]
    },
    "execCommand('removeFormat') -JS": {
    "description": "execCommand('removeFormat') -JS",
        "prefix":"execRemoveFormat",
        "body":[
        "document.execCommand('removeFormat')$0"
    ]
    },
    "execCommand('selectAll') -JS": {
    "description": "execCommand('selectAll') -JS",
        "prefix":"execSelectAll",
        "body":[
        "document.execCommand('selectAll')$0"
    ]
    },
    "execCommand('strikeThrough') -JS": {
    "description": "execCommand('strikeThrough') -JS",
        "prefix":"execStrikeThrough",
        "body":[
        "document.execCommand('strikeThrough')$0"
    ]
    },
    "execCommand('subscript') -JS": {
    "description": "execCommand('subscript') -JS",
        "prefix":"execSubscript",
        "body":[
        "document.execCommand('subscript')$0"
    ]
    },
    "execCommand('superscript') -JS": {
    "description": "execCommand('superscript') -JS",
        "prefix":"execSuperscript",
        "body":[
        "document.execCommand('superscript')$0"
    ]
    },
    "execCommand('underline') -JS": {
    "description": "execCommand('underline') -JS",
        "prefix":"execUnderline",
        "body":[
        "document.execCommand('underline')$0"
    ]
    },
    "execCommand('undo') -JS": {
    "description": "execCommand('undo') -JS",
        "prefix":"execUndo",
        "body":[
        "document.execCommand('undo')$0"
    ]
    },
    "execCommand('unlink') -JS": {
    "description": "execCommand('unlink') -JS",
        "prefix":"execUnlink",
        "body":[
        "document.execCommand('unlink')$0"
    ]
    },
    "execCommand('styleWithCSS') -JS": {
    "description": "execCommand('styleWithCSS') -JS",
        "prefix":"execStyleWithCSS",
        "body":[
        "document.execCommand('styleWithCSS')$0"
    ]
    },
    "canvas with c = canvas.getContext('2d') -JS": {
    "description": "canvas with c = canvas.getContext('2d') -JS",
        "prefix":"canvas2d",
        "body":[
        "const canvas = document.querySelector('canvas')",
        "const c = canvas.getContext('2d')"
    ]
    },
    "canvas.getContext('2d') -JS": {
    "description": "canvas.getContext('2d') -JS",
        "prefix":"getContext2d",
        "body":[
        "canvas.getContext('2d')$0"
    ]
    },
    "canvas.width -JS": {
    "description": "canvas.width -JS",
        "prefix":"canvasWidth",
        "body":[
        "canvas.width$0"
    ]
    },
    "canvas.height -JS": {
    "description": "canvas.height -JS",
        "prefix":"canvasHeight",
        "body":[
        "canvas.height$0"
    ]
    },
    "clearRect(0,0,canvas.width,canvas.height) -JS": {
    "description": "clearRect(0,0,canvas.width,canvas.height) -JS",
        "prefix":"clearRect",
        "body":[
        "clearRect(0,0,canvas.width,canvas.height)$0"
    ]
    },
    "drawImage(img,dx,dy,dw,dh) -JS": {
    "description": "drawImage(img,dx,dy,dw,dh) -JS",
        "prefix":"drawImage",
        "body":[
        "drawImage(img,dx,dy,dw,dh)$0"
    ]
    },
    "drawImage(img,sx,sy,sw,sh,posx,posy,dw,dh) -JS": {
    "description": "drawImage(img,sx,sy,sw,sh,posx,posy,dw,dh) -JS",
        "prefix":"drawImageSprite",
        "body":[
        "drawImage(img,sx,sy,sw,sh,posx,posy,dw,dh)$0"
    ]
    },
    "canvas.toBlob -JS": {
    "description": "canvas.toBlob -JS",
        "prefix":"toBlob",
        "body":[
        "toBlob(${2:callback},${2:mimeType},${3:quality})$0"
    ]
    },
    "src = path -JS": {
    "description": "src = path -JS",
        "prefix":"src",
        "body":[
        "src = ${1:path}$0"
    ]
    },
    "new Image() -JS": {
    "description": "new Image() -JS",
        "prefix":"newImage",
        "body":[
        "new Image()$0"
    ]
    },
    "new BlobBuilder() -JS": {
    "description": "new BlobBuilder() -JS",
        "prefix":"newBlobBuilder",
        "body":[
        "new BlobBuilder()$0"
    ]
    },
    "new Date() -JS": {
    "description": "new Date() -JS",
        "prefix":"newDate",
        "body":[
        "new Date()$0"
    ]
    },
    "new Map() -JS": {
    "description": "new Map() -JS",
        "prefix":"newMap",
        "body":[
        "new Map()$0"
    ]
    },
    "new FormData() -JS": {
    "description": "new FormData() -JS",
        "prefix":"newFormData",
        "body":[
        "new FormData()$0"
    ]
    },
    "new Number() -JS": {
    "description": "new Number() -JS",
        "prefix":"newNumber",
        "body":[
        "new Number($1)$0"
    ]
    },
    "new String() -JS": {
    "description": "new String() -JS",
        "prefix":"newString",
        "body":[
        "new String($1)$0"
    ]
    },
    "new Symbol() -JS": {
    "description": "new Symbol() -JS",
        "prefix":"newSymbol",
        "body":[
        "new Symbol($1)$0"
    ]
    },
    "new Function() -JS": {
    "description": "new Function() -JS",
        "prefix":"newFunction",
        "body":[
        "new Function($1)$0"
    ]
    },
    "new RegExp() -JS": {
    "description": "new RegExp() -JS",
        "prefix":"newRegExp",
        "body":[
        "new RegExp($1)$0"
    ]
    },
    "new Object() -JS": {
    "description": "new Object() -JS",
        "prefix":"newObject",
        "body":[
        "new Object($1)$0"
    ]
    },
    "new Array() -JS": {
    "description": "new Array() -JS",
        "prefix":"newArray",
        "body":[
        "new Array($1)$0"
    ]
    },
    "new Animation(effect,timeline) -JS": {
    "description": "new Animation(effect,timeline) -JS",
        "prefix":"newAnimation",
        "body":[
        "new Animation(${1:effect},${2:timeline})$0"
    ]
    },
    "new Blob(array,options) -JS": {
    "description": "new Blob(array,options) -JS",
        "prefix":"newBlob",
        "body":[
        "new Blob(${1:array},${2:options})$0"
    ]
    },
    "new URL(pathname,hostname) -JS": {
    "description": "new URL(pathname,hostname) -JS",
        "prefix":"newURL",
        "body":[
        "new URL('${1:pathname}','${2:hostname}')$0"
    ]
    },
    "new URLSearchParams(init) -JS": {
    "description": "new URLSearchParams(init) -JS",
        "prefix":"newURLSearchParams",
        "body":[
        "new URLSearchParams(${1:init})$0"
    ]
    },
    "Date() -JS": {
    "description": "Date() -JS",
        "prefix":"date",
        "body":[
        "Date()$0"
    ]
    },
    "Date.now() -JS": {
    "description": "Date.now() -JS",
        "prefix":"dateNow",
        "body":[
        "Date.now()$0"
    ]
    },
    "now(), Date.now() or performance.now() -JS": {
    "description": "now(), Date.now() or performance.now() -JS",
        "prefix":"now",
        "body":[
        "now()$0"
    ]
    },
    "Date.parse() -JS": {
    "description": "Date.parse() -JS",
        "prefix":"dateParse",
        "body":[
        "Date.parse($1)$0"
    ]
    },
    "parse() -JS": {
    "description": "parse() -JS",
        "prefix":"parse",
        "body":[
        "parse($1)$0"
    ]
    },
    "Date.UTC() -JS": {
    "description": "Date.UTC() -JS",
        "prefix":"dateUTC",
        "body":[
        "Date.UTC($1)$0"
    ]
    },
    "UTC() -JS": {
    "description": "UTC() -JS",
        "prefix":"UTC",
        "body":[
        "UTC($1)$0"
    ]
    },
    "getDate() -JS": {
    "description": "getDate() -JS",
        "prefix":"getDate",
        "body":[
        "getDate()$0"
    ]
    },
    "getDay() -JS": {
    "description": "getDay() -JS",
        "prefix":"getDay",
        "body":[
        "getDay()$0"
    ]
    },
    "getFullYear() -JS": {
    "description": "getFullYear() -JS",
        "prefix":"getFullYear",
        "body":[
        "getFullYear()$0"
    ]
    },
    "getHours() -JS": {
    "description": "getHours() -JS",
        "prefix":"getHours",
        "body":[
        "getHours()$0"
    ]
    },
    "getMilliseconds() -JS": {
    "description": "getMilliseconds() -JS",
        "prefix":"getMilliseconds",
        "body":[
        "getMilliseconds()$0"
    ]
    },
    "getMinutes() -JS": {
    "description": "getMinutes() -JS",
        "prefix":"getMinutes",
        "body":[
        "getMinutes()$0"
    ]
    },
    "getMonth() -JS": {
    "description": "getMonth() -JS",
        "prefix":"getMonth",
        "body":[
        "getMonth()$0"
    ]
    },
    "getSeconds() -JS": {
    "description": "getSeconds() -JS",
        "prefix":"getSeconds",
        "body":[
        "getSeconds()$0"
    ]
    },
    "getTime() -JS": {
    "description": "getTime() -JS",
        "prefix":"getTime",
        "body":[
        "getTime()$0"
    ]
    },
    "getTimezoneOffset() -JS": {
    "description": "getTimezoneOffset() -JS",
        "prefix":"getTimezoneOffset",
        "body":[
        "getTimezoneOffset()$0"
    ]
    },
    "getUTCDate() -JS": {
    "description": "getUTCDate() -JS",
        "prefix":"getUTCDate",
        "body":[
        "getUTCDate()$0"
    ]
    },
    "getUTCDay() -JS": {
    "description": "getUTCDay() -JS",
        "prefix":"getUTCDay",
        "body":[
        "getUTCDay()$0"
    ]
    },
    "getUTCFullYear() -JS": {
    "description": "getUTCFullYear() -JS",
        "prefix":"getUTCFullYear",
        "body":[
        "getUTCFullYear()$0"
    ]
    },
    "getUTCHours() -JS": {
    "description": "getUTCHours() -JS",
        "prefix":"getUTCHours",
        "body":[
        "getUTCHours()$0"
    ]
    },
    "getUTCMilliseconds() -JS": {
    "description": "getUTCMilliseconds() -JS",
        "prefix":"getUTCMilliseconds",
        "body":[
        "getUTCMilliseconds()$0"
    ]
    },
    "getUTCMinutes() -JS": {
    "description": "getUTCMinutes() -JS",
        "prefix":"getUTCMinutes",
        "body":[
        "getUTCMinutes()$0"
    ]
    },
    "getUTCMonth() -JS": {
    "description": "getUTCMonth() -JS",
        "prefix":"getUTCMonth",
        "body":[
        "getUTCMonth()$0"
    ]
    },
    "getUTCSeconds() -JS": {
    "description": "getUTCSeconds() -JS",
        "prefix":"getUTCSeconds",
        "body":[
        "getUTCSeconds()$0"
    ]
    },
    "setDate() -JS": {
    "description": "setDate() -JS",
        "prefix":"setDate",
        "body":[
        "setDate($1)$0"
    ]
    },
    "setFullYear() -JS": {
    "description": "setFullYear() -JS",
        "prefix":"setFullYear",
        "body":[
        "setFullYear($1)$0"
    ]
    },
    "setHours() -JS": {
    "description": "setHours() -JS",
        "prefix":"setHours",
        "body":[
        "setHours($1)$0"
    ]
    },
    "setMilliseconds() -JS": {
    "description": "setMilliseconds() -JS",
        "prefix":"setMilliseconds",
        "body":[
        "setMilliseconds($1)$0"
    ]
    },
    "setMinutes() -JS": {
    "description": "setMinutes() -JS",
        "prefix":"setMinutes",
        "body":[
        "setMinutes($1)$0"
    ]
    },
    "setMonth() -JS": {
    "description": "setMonth() -JS",
        "prefix":"setMonth",
        "body":[
        "setMonth($1)$0"
    ]
    },
    "setSeconds() -JS": {
    "description": "setSeconds() -JS",
        "prefix":"setSeconds",
        "body":[
        "setSeconds($1)$0"
    ]
    },
    "setTime() -JS": {
    "description": "setTime() -JS",
        "prefix":"setTime",
        "body":[
        "setTime($1)$0"
    ]
    },
    "setUTCDate() -JS": {
    "description": "setUTCDate() -JS",
        "prefix":"setUTCDate",
        "body":[
        "setUTCDate($1)$0"
    ]
    },
    "setUTCFullYear() -JS": {
    "description": "setUTCFullYear() -JS",
        "prefix":"setUTCFullYear",
        "body":[
        "setUTCFullYear($1)$0"
    ]
    },
    "setUTCHours() -JS": {
    "description": "setUTCHours() -JS",
        "prefix":"setUTCHours",
        "body":[
        "setUTCHours($1)$0"
    ]
    },
    "setUTCMilliseconds() -JS": {
    "description": "setUTCMilliseconds() -JS",
        "prefix":"setUTCMilliseconds",
        "body":[
        "setUTCMilliseconds($1)$0"
    ]
    },
    "setUTCMinutes() -JS": {
    "description": "setUTCMinutes() -JS",
        "prefix":"setUTCMinutes",
        "body":[
        "setUTCMinutes($1)$0"
    ]
    },
    "setUTCMonth() -JS": {
    "description": "setUTCMonth() -JS",
        "prefix":"setUTCMonth",
        "body":[
        "setUTCMonth($1)$0"
    ]
    },
    "setUTCSeconds() -JS": {
    "description": "setUTCSeconds() -JS",
        "prefix":"setUTCSeconds",
        "body":[
        "setUTCSeconds($1)$0"
    ]
    },
    "toDateString() -JS": {
    "description": "toDateString() -JS",
        "prefix":"toDateString",
        "body":[
        "toDateString()$0"
    ]
    },
    "toISOString() -JS": {
    "description": "toISOString() -JS",
        "prefix":"toISOString",
        "body":[
        "toISOString()$0"
    ]
    },
    "toJSON() -JS": {
    "description": "toJSON() -JS",
        "prefix":"toJSON",
        "body":[
        "toJSON()$0"
    ]
    },
    "toLocaleDateString() -JS": {
    "description": "toLocaleDateString() -JS",
        "prefix":"toLocaleDateString",
        "body":[
        "toLocaleDateString()$0"
    ]
    },
    "toLocaleString(): Array, TypedArray, Date, Number, Object -JS": {
    "description": "toLocaleString(): Array, TypedArray, Date, Number, Object -JS",
        "prefix":"toLocaleString",
        "body":[
        "toLocaleString()$0"
    ]
    },
    "toLocaleTimeString() -JS": {
    "description": "toLocaleTimeString() -JS",
        "prefix":"toLocaleTimeString",
        "body":[
        "toLocaleTimeString()$0"
    ]
    },
    "Date.toSource() Date's Code as String,-JS": {
    "description": "Date.toSource() Date's Code as String,-JS",
        "prefix":"DateToSource",
        "body":[
        "Date.toSource()$0"
    ]
    },
    "toSource() -JS": {
    "description": "toSource() -JS",
        "prefix":"toSource",
        "body":[
        "toSource()$0"
    ]
    },
    "toTimeString() -JS": {
    "description": "toTimeString() -JS",
        "prefix":"toTimeString",
        "body":[
        "toTimeString()$0"
    ]
    },
    "toUTCString() -JS": {
    "description": "toUTCString() -JS",
        "prefix":"toUTCString",
        "body":[
        "toUTCString()$0"
    ]
    },
    "valueOf() -JS": {
    "description": "valueOf() -JS",
        "prefix":"valueOf",
        "body":[
        "valueOf()$0"
    ]
    },
    "blob.size -JS": {
    "description": "blob.size -JS",
        "prefix":"sizeBlob",
        "body":[
        "size$0"
    ]
    },
    "blob.type -JS": {
    "description": "blob.type -JS",
        "prefix":"typeBlob",
        "body":[
        "type$0"
    ]
    },
    "blob.slice(start,end) -JS": {
    "description": "blob.slice(start,end) -JS",
        "prefix":"sliceBlob",
        "body":[
        "slice(${1:start},${2:end})$0"
    ]
    },
    "URL.createObjectURL(file/blob) -JS": {
    "description": "URL.createObjectURL(file/blob) -JS",
        "prefix":"URLcreateObjectURL",
        "body":[
        "URL.createObjectURL(${1:file/blob})$0"
    ]
    },
    "createObjectURL(file/blob) -JS": {
    "description": "createObjectURL(file/blob) -JS",
        "prefix":"createObjectURL",
        "body":[
        "createObjectURL(${1:file/blob})$0"
    ]
    },
    "URL.revokeObjectURL(objectURL) -JS": {
    "description": "URL.revokeObjectURL(objectURL) -JS",
        "prefix":"URLrevokeObjectURL",
        "body":[
        "URL.revokeObjectURL(${1:objectURL})$0"
    ]
    },
    "revokeObjectURL(objectURL) -JS": {
    "description": "revokeObjectURL(objectURL) -JS",
        "prefix":"revokeObjectURL",
        "body":[
        "revokeObjectURL(${1:objectURL})$0"
    ]
    },
    "URLObject.origin -JS": {
    "description": "URLObject.origin -JS",
        "prefix":"origin",
        "body":[
        "origin$0"
    ]
    },
    "URL.searchParams -JS": {
    "description": "URL.searchParams -JS",
        "prefix":"searchParams",
        "body":[
        "searchParams$0"
    ]
    },
    "MimeType = {} -JS": {
    "description": "MimeType = {} -JS",
        "prefix":"mimeTypeObject",
        "body":[
        "MimeType = {",
        "  txt:'text/plain',",
        "  html:'text/html',",
        "  css:'text/css',",
        "  js:'text/javascript',",
        "  json:'text/json',",
        "  ico:'image/x-icon',",
        "  jpg:'image/jpeg',",
        "  png:'image/png',",
        "  gif:'image/gif',",
        "  webp:'image/webp',",
        "  bmp:'image/bmp',",
        "  svg:'image/svg+xml',",
        "  ogg:'audio/ogg',",
        "  webm:'audio/webm',",
        "  wav:'audio/wav',",
        "  xwav:'audio/x-wav',",
        "  wave:'audio/wave',",
        "  mpeg:'audio/mpeg',",
        "  midi:'audio/midi',",
        "  xpn:'audio/x-pn',",
        "  ogv:'video/ogg',",
        "  webv:'video/webm',",
        "  mp4:'video/mp4',",
        "  xhtml:'application/xhtml+xml',",
        "  xml:'application/xml',",
        "  pdf:'application/pdf',",
        "  binary:'application/octet-stream',",
        "  pkcs12:'application/pkcs12',",
        "  mspowerpoint:'application/vnd.mspowerpoint',",
        "  oggapp:'application/ogg',",
        "  rar:'application/x-rar-compressed',",
        "  formdata:'multipart/form-data',",
        "  byteranges:'multipart/byteranges'",
        "}$0"
      ]
    }
}